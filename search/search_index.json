{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"nornir_cli","text":"<p><code>nornir_cli</code> is CLI tool based on Nornir framework, Nornir Plugins and Click</p>"},{"location":"#features","title":"Features","text":"<ul> <li> <p>Simple CLI network orchestrator</p> <p><code>nornir_cli</code> is a simple CLI orchestrator, that you can use to interact with the SoT and manage your network</p> </li> <li> <p>Workflow</p> <p><code>nornir_cli</code> workflow is <code>Nornir</code> workflow, but from CLI</p> </li> <li> <p>Manage your custom nornir runbooks</p> <ul> <li>Create and manage your own nornir runbook collections: <ul> <li>Add your custom nornir runbooks as custom commands in <code>nornir_cli</code> with <code>runbook collections</code> feature</li> <li>Pass any python objects between custom commands </li> <li>Run custom commands for any hosts directly from the CLI</li> </ul> </li> <li>Or use <code>nornir_cli</code> for inventory management only, and take the result in your nornir runbooks. By excluding getting and filtering the inventory in your runbooks, you will make them more versatile.</li> </ul> </li> <li> <p>Manage Inventory</p> <p>Get Inventory, filter Inventory, output Inventory and save Inventory state from the CLI for any inventory plugin. This is really useful for large, structured Inventory - for example, NetBox with nornir_netbox plugin.</p> <p>You can use nornir_netbox or SimpleInventory, by default. Another inventory plugin needs to be installed from here with <code>pip</code>. </p> </li> <li> <p>Run Nornir Plugins</p> <p><code>nornir_cli</code> already has commands, based on Nornir Plugins. Run them from the CLI, check result and statistic</p> </li> <li> <p>Build a chain of <code>nornir_cli</code> commands</p> <p>Initialize Nornir, filter Inventory and run any command/command chains as one command</p> </li> <li> <p>Json input. Json output</p> <p>Json strings are everywhere! Command options and arguments accept json strings. Use this feature in your scripts with the <code>jq</code>, <code>jc</code> utilities</p> </li> <li> <p>Custom Multi Commands with click</p> <p><code>nornir_cli</code> based on click Custom Multi Commands, so you can easily add your custom command by following some principles</p> </li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#install","title":"Install","text":"<p>Please, at first, check the dependencies in <code>pyproject.toml</code> and create new virtual environment if necessary and then:</p> <p>with pip:</p> <pre><code>pip install nornir_cli\n</code></pre> <p>with git:</p> <pre><code>git clone https://github.com/timeforplanb123/nornir_cli.git\ncd nornir_cli\npip install .\n# or\npoetry install\n</code></pre> <p>with Docker:</p> <pre><code>git clone https://github.com/timeforplanb123/nornir_cli.git\ncd nornir_cli\ndocker build -t timeforplanb123/nornir_cli .\ndocker run --rm -it timeforplanb123/nornir_cli sh\n\n# nornir_cli --version\nnornir_cli, version 1.3.0\n</code></pre>"},{"location":"#simple-example","title":"Simple Example","text":"config.yamlhosts.yamlnornir_cli <pre><code># Simple Nornir configuration file\ninventory:\n    plugin: SimpleInventory\n    options:\n        host_file: \"inventory/hosts.yaml\"\n</code></pre> <pre><code># Single host inventory\ndev_1:\n    hostname: 10.1.0.1\n    username: username \n    password: password\n    # huawei is just an example here\n    platform: huawei\n</code></pre> <pre><code># As instance, let's run netmiko_send_command\n\n$ nornir_cli nornir-netmiko init netmiko_send_command --command_string \"display clock\"\n\nnetmiko_send_command************************************************************\n* dev_1 ** changed : False *****************************************************\nvvvv netmiko_send_command ** changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO\n2021-03-17 14:04:22+03:00\nWednesday\nTime Zone(Moscow) : UTC+03:00\n^^^^ END netmiko_send_command ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ndev_1                                             : ok=1               changed=0               failed=0\n\nOK      : 1\nCHANGED : 0\nFAILED  : 0\n</code></pre>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#tasks-and-runbooks","title":"Tasks and runbooks","text":""},{"location":"examples/#single-task","title":"Single Task","text":"one:two:three:four: <pre><code># as one comand with config.yaml\n\n$ nornir_cli nornir-netmiko init -u username -p password \\\nfilter --hosts -a 'name__contains=dev_1 device_role__name__contains=leaf' \\\nnetmiko_send_command --command_string \"display clock\"\n[\n    \"dev_1\"\n]\nnetmiko_send_command************************************************************\n* dev_1 ** changed : False *****************************************************\nvvvv netmiko_send_command ** changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO\n2021-03-21 23:15:23+03:00\nSunday\nTime Zone(Moscow) : UTC+03:00\n^^^^ END netmiko_send_command ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ndev_1            : ok=1               changed=0               failed=0\n\nOK      : 1\nCHANGED : 0\nFAILED  : 0\n</code></pre> <pre><code># as one comand without config.yaml\n\n$ nornir_cli nornir-netmiko init -u username -p password -c \"\" -f \\\n'inventory={\"plugin\":\"NetBoxInventory2\", \"options\": {\"nb_url\": \"your_netbox_domain\", \\\n\"nb_token\": \"your_netbox_token\", \"ssl_verify\": false}} \\\nrunner={\"plugin\": \"threaded\", \"options\": {\"num_workers\": 50}} \\\nlogging={\"enabled\":true, \"level\": \"DEBUG\", \"to_console\": true}' \\\nfilter --hosts -a 'name__contains=dev_1 \\\ndevice_role__name__contains=leaf' netmiko_send_command --command_string \"display clock\"\n\nnetmiko_send_command************************************************************\n* dev_1 ** changed : False *****************************************************\nvvvv netmiko_send_command ** changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO\n2021-03-21 23:20:53+03:00\nSunday\nTime Zone(Moscow) : UTC+03:00\n^^^^ END netmiko_send_command ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ndev_1            : ok=1               changed=0               failed=0\n\nOK      : 1\nCHANGED : 0\nFAILED  : 0\n</code></pre> <pre><code># as many commands with config.yaml\n\n$ nornir_cli nornir-netmiko init -u username -p password\n\n$ nornir_cli nornir-netmiko filter --hosts -a -s 'name__contains=dev_1 device_role__name__contains=leaf'\n[\n    \"dev_1\"\n]\n\n$ nornir_cli nornir-netmiko netmiko_send_command --command_string \"display clock\"\n\nnetmiko_send_command************************************************************\n* dev_1 ** changed : False *****************************************************\nvvvv netmiko_send_command ** changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO\n2021-03-21 23:30:13+03:00\nSunday\nTime Zone(Moscow) : UTC+03:00\n^^^^ END netmiko_send_command ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ndev_1            : ok=1               changed=0               failed=0\n\nOK      : 1\nCHANGED : 0\nFAILED  : 0\n</code></pre> <pre><code># of course, the same thing can be done without a configuration file\n</code></pre> <p>Or the same, but with json string arguments:</p> one:two:three:four: <pre><code># as one comand with config.yaml\n\n$ nornir_cli nornir-netmiko init -u username -p password \\\nfilter --hosts -a 'name__contains=dev_1 device_role__name__contains=leaf' \\\nnetmiko_send_command '{\"command_string\":\"display clock\"}'\n[\n    \"dev_1\"\n]\nnetmiko_send_command************************************************************\n* dev_1 ** changed : False *****************************************************\nvvvv netmiko_send_command ** changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO\n2021-03-21 23:15:23+03:00\nSunday\nTime Zone(Moscow) : UTC+03:00\n^^^^ END netmiko_send_command ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ndev_1            : ok=1               changed=0               failed=0\n\nOK      : 1\nCHANGED : 0\nFAILED  : 0\n</code></pre> <pre><code># as one comand without config.yaml\n\n$ nornir_cli nornir-netmiko init -u username -p password -c \"\" -f \\\n'{\"inventory\":{\"plugin\":\"NetBoxInventory2\", \"options\": {\"nb_url\": \"your_netbox_domain\", \\\n\"nb_token\": \"your_netbox_token\", \"ssl_verify\": false}}, \\\n\"runner\":{\"plugin\": \"threaded\", \"options\": {\"num_workers\": 50}} \\\n\"logging\":{\"enabled\":true, \"level\": \"DEBUG\", \"to_console\": true}}' \\\nfilter --hosts -a 'name__contains=dev_1 \\\ndevice_role__name__contains=leaf' netmiko_send_command '{\"command_string\":\"display clock\"}'\n\nnetmiko_send_command************************************************************\n* dev_1 ** changed : False *****************************************************\nvvvv netmiko_send_command ** changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO\n2021-03-21 23:20:53+03:00\nSunday\nTime Zone(Moscow) : UTC+03:00\n^^^^ END netmiko_send_command ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ndev_1            : ok=1               changed=0               failed=0\n\nOK      : 1\nCHANGED : 0\nFAILED  : 0\n</code></pre> <pre><code># as many commands with config.yaml\n\n$ nornir_cli nornir-netmiko init -u username -p password\n\n$ nornir_cli nornir-netmiko filter --hosts -a -s 'name__contains=dev_1 device_role__name__contains=leaf'\n[\n    \"dev_1\"\n]\n\n$ nornir_cli nornir-netmiko netmiko_send_command '{\"command_string\":\"display clock\"}'\n\nnetmiko_send_command************************************************************\n* dev_1 ** changed : False *****************************************************\nvvvv netmiko_send_command ** changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO\n2021-03-21 23:30:13+03:00\nSunday\nTime Zone(Moscow) : UTC+03:00\n^^^^ END netmiko_send_command ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ndev_1            : ok=1               changed=0               failed=0\n\nOK      : 1\nCHANGED : 0\nFAILED  : 0\n</code></pre> <pre><code># of course, the same thing can be done without a configuration file\n</code></pre>"},{"location":"examples/#task-chains","title":"Task chains","text":"<pre><code># any chain of commands in a group/plugin is possible\n\n$ nornir_cli nornir-scrapli init -u username -p password \\\n-co '{\"scrapli\": {\"platform\": \"huawei_vrp\", \"extras\":{\"ssh_config_file\": true}}}' \\\nfilter --hosts -s 'name=dev_1' send_command '{\"command\":\"display clock\"}' \\\nsend_interactive '{\"interact_events\":[[\"save\", \"Are you sure to continue?[Y/N]\", \\\nfalse], [\"Y\", \"Save the configuration successfully.\", true]]}'\n[\n    \"dev_1\"\n]\n\nsend_command********************************************************************\n* dev_1 ** changed : False *****************************************************\nvvvv send_command ** changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO\n2021-03-19 14:12:38+03:00\nFriday\nTime Zone(Moscow) : UTC+03:00\n^^^^ END send_command ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ndev_1            : ok=1               changed=0               failed=0\n\nOK      : 1\nCHANGED : 0\nFAILED  : 0\n\nsend_interactive****************************************************************\n* dev_1 ** changed : True ******************************************************\nvvvv send_interactive ** changed : True vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO\n^^^^ END send_interactive ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ndev_1            : ok=1               changed=1               failed=0\n\nOK      : 1\nCHANGED : 1\nFAILED  : 0\n</code></pre>"},{"location":"examples/#custom-nornir-runbooks","title":"Custom Nornir runbooks","text":"<p>How to add a previously written Nornir runbook in <code>nornir_cli</code></p> <p>How to run custom runbook</p> <p>And here is an example of this runbook(btw, all examples are here):</p> Nornir runbook example:jinja2 template:textfsm template: <pre><code># nornir_cli/custom_commands/dhcp/cmd_dhcp_snooping.py\nimport os\n\nfrom nornir.core.plugins.connections import ConnectionPluginRegister\n\nfrom nornir_cli.common_commands import custom, print_stat\n\nfrom nornir_jinja2.plugins.tasks import template_file\n\nfrom nornir_netmiko import netmiko_send_command, netmiko_send_config\n\n\n@custom\ndef cli(ctx):\n    \"\"\"\n    Configure dhcp snooping\n    \"\"\"\n    def _get_trusted_untrusted(task):\n        ConnectionPluginRegister.auto_register()\n        # Get parameters in format:\n        #    [ { 'description': 'NNI',\n        #        'mac_address': 'xxxx-yyyy-zzzz',\n        #        'mtu': '',\n        #        'name': 'Ethernet0/0/1'},]\n        intfs = task.run(\n            task=netmiko_send_command,\n            name=\"interfaces list\",\n            command_string=\"disp int\",\n            use_textfsm=True,\n            textfsm_template=os.path.join(\n                os.path.dirname(os.path.abspath(__file__)), \"templates/disp_int.template\"\n            ),\n        )\n        # Get trusted interfaces\n        task.host[\"trusted\"] = [\n            i[\"name\"] for i in intfs.result if \"NNI\" in i[\"description\"]\n        ]\n        # Get untrusted interfaces\n        task.host[\"untrusted\"] = [\n            i[\"name\"]\n            for i in intfs.result\n            if \"NNI\" not in i[\"description\"] and not i[\"mtu\"]\n        ]\n        # Render j2 template\n        template = task.run(\n            task=template_file,\n            path=os.path.join(\n                os.path.dirname(os.path.abspath(__file__)), \"templates\"\n            ),\n            template=\"dhcp_snooping.j2\",\n        )\n        # Configure commands from j2 template\n        task.host[\"template\"] = template.result\n        task.run(\n            task=netmiko_send_config,\n            name=\"Configure dhcp snooping\",\n            config_commands=template.result,\n            cmd_verify=False,\n            exit_config_mode=False,\n        )\n\n    result = ctx.nornir.run(task=_get_trusted_untrusted, on_failed=True)\n    # add result to ctx.result for print_result, write_result, write_results\n    # `netmiko_send_config` doesn't return data, so `result` will be empty\n    # ctx.result = result\n\n    # Show statistic\n    print_stat(ctx.nornir, result)\n</code></pre> <pre><code># nornir_cli/custom_commands/dhcp/templates/dhcp_snooping.j2\n\ndhcp enable\ndhcp snooping enable\n#\n{% for intf in host.untrusted %}\ninterface {{ intf }}\n dhcp snooping enable no-user-binding\n Y\n dhcp snooping check dhcp-chaddr enable\n{% endfor %}\n#\n{% for intf in host.trusted %}\ninterface {{ intf }}\n dhcp snooping enable no-user-binding\n Y\n dhcp snooping trusted\n{% endfor %}\n#\nq\nq\nsave\nY\n</code></pre> <pre><code># nornir_cli/custom_commands/dhcp/templates/disp_int.template\n\nValue NAME (\\S+)\nValue DESCRIPTION (.*)\nValue MAC_ADDRESS (\\w+-\\w+-\\w+)\nValue MTU (\\d+)\n\nStart\n  ^\\S+ current state.* -&gt; Continue.Record\n  ^${NAME} current state.*\n  ^Description:${DESCRIPTION}\n  ^.* Maximum Transmit Unit is ${MTU}\n  ^.* Hardware address is ${MAC_ADDRESS}\n</code></pre>"},{"location":"examples/#textfsm","title":"Textfsm","text":"<pre><code>$ nornir_cli nornir-netmiko netmiko_send_command --command_string \"disp int\" --use_textfsm True --textfsm_template nornir_cli/custom_commands/templates/disp_int.template \n\nnetmiko_send_command************************************************************\n* dev_1 ** changed : False *****************************************************\nvvvv netmiko_send_command ** changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO\n[ { 'description': 'NNI',\n    'mac_address': 'f898-ef49-b5d0',\n    'mtu': '',\n    'name': 'Ethernet0/0/1'},\n  { 'description': '',\n    'mac_address': 'f898-ef49-b5d0',\n    'mtu': '',\n    'name': 'Ethernet0/0/2'},\n\n    ...\n\n]\n^^^^ END netmiko_send_command ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ndev_1            : ok=1               changed=0               failed=0\n\nOK      : 1\nCHANGED : 0\nFAILED  : 0\n</code></pre>"},{"location":"examples/#routeros","title":"routeros","text":"<p><code>nornir_cli</code> is not compatible with <code>nornir-routeros</code> since <code>0.3.0</code> version. <code>nornir-routeros</code> has been removed from <code>nornir_cli 1.2.0</code>. </p> <p>But starting from <code>nornir_cli</code> version <code>1.3.0</code>, you can pass any additional arguments as a json string to Nornir plugin commands. This feature allows you to run any Nornir plugin command without an unique set of parameters.</p> config.yaml:inventory/hosts,yaml:routeros_command: <pre><code>config.yaml:\n# Simple Nornir configuration file\ninventory:\n    plugin: SimpleInventory\n    options:\n        host_file: \"inventory/hosts.yaml\"\n</code></pre> <pre><code># Single host inventory\ndev_1:\n    hostname: 10.1.2.3\n    username: username\n    password: password\n    port: 8728\n    connection_options:\n      routerosapi:\n        extras:\n          use_ssl: False\n</code></pre> <pre><code>$ nornir_cli nornir-routeros init -c \"/home/user/config.yaml\" routeros_command '{\"path\":\"/\", \"command\":\"ping\", \"address\":\"1.1.1.1\", \"count\":4}'\n\n# or\n# $ nornir_cli nornir-routeros init -c \"/home/user/config.yaml\" routeros_command --path \"/\" --command \"ping\" '{\"address\":\"1.1.1.1\", \"count\":4}'\nrouteros_command****************************************************************\n* dev_1 ** changed : False *****************************************************\nvvvv routeros_command ** changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO\n[ { 'avg-rtt': b'22ms',\n    'host': b'1.1.1.1',\n    'max-rtt': b'22ms',\n    'min-rtt': b'22ms',\n    'packet-loss': b'0',\n    'received': b'1',\n    'sent': b'1',\n    'seq': b'0',\n    'size': b'56',\n    'time': b'22ms',\n    'ttl': b'56'},\n    ...\n^^^^ END routeros_command ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ndev_1                                             : ok=1               changed=0               failed=0\n\nOK      : 1\nCHANGED : 0\nFAILED  : 0\n</code></pre>"},{"location":"examples/#nornir-paramiko","title":"nornir-paramiko","text":"<p><code>nornir-paramiko</code> does not work correctly with network devices, because it uses <code>exec_command</code>(see here) instead of <code>send</code> and <code>recv</code>. It works correctly with <code>linux/unix</code>:</p> config.yaml:inventory/hosts.yaml:paramiko_command: <pre><code># Simple Nornir configuration file\ninventory:\n    plugin: SimpleInventory\n    options:\n        host_file: \"inventory/hosts.yaml\"\n</code></pre> <pre><code># Single host inventory\nhost_1:\n    hostname: 10.3.2.1\n    username: username\n    password: password\n    connection_options:\n      paramiko:\n        extras:\n          allow_agent: False\n          look_for_keys: False\n</code></pre> <pre><code>$ nornir_cli nornir-paramiko init paramiko_command --command \"pwd\"\nparamiko_command****************************************************************\n* host_1 ** changed : False ****************************************************\nvvvv paramiko_command ** changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO\n/home/user\n\n^^^^ END paramiko_command ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nhost_1                                     : ok=1               changed=0               failed=0\n\nOK      : 1\nCHANGED : 0\nFAILED  : 0\n</code></pre>"},{"location":"examples/#nornir-pyxl","title":"nornir-pyxl","text":"<p>As instance, <code>Untitled.xlsx</code> file has single sheet - <code>Sheet1</code></p> config.yaml:inventory/hosts.yaml:Untitled.xlsx:pyxl_ez_data: <pre><code># Simple Nornir configuration file\ninventory:\n    plugin: SimpleInventory\n    options:\n        host_file: \"inventory/hosts.yaml\"\n</code></pre> <pre><code># Single host inventory\ndev_1:\n    hostname: 10.1.2.3\n    username: username\n    password: password\n</code></pre> <pre><code>SITE_ID CLLI    SYSTEM NAME NTP SERVER 1IP  NTP SERVER 2IP  NTP SERVER 3IP  NTP SERVER 4IP\nQ345501 PHNZAZ  PHNZAZ-63569    192.168.1.100   192.168.1.102/32    192.168.100.3   time.ntp.com\n</code></pre> <pre><code>nornir_cli nornir-pyxl init pyxl_ez_data --workbook Untitled.xlsx --sheetname Sheet1\npyxl_ez_data********************************************************************\n* dev_1 ** changed : False *****************************************************\nvvvv pyxl_ez_data ** changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO\n[ { 'clli': 'PHNZAZ',\n    'ntp_server_1ip': '192.168.1.100',\n    'ntp_server_2ip': '192.168.1.102/32',\n    'ntp_server_3ip': '192.168.100.3',\n    'ntp_server_4ip': 'time.ntp.com',\n    'site_id': 'Q345501',\n    'system_name': 'PHNZAZ-63569'}]\n^^^^ END pyxl_ez_data ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ndev_1                                     : ok=1               changed=0               failed=0\n\nOK      : 1\nCHANGED : 0\nFAILED  : 0\n</code></pre> <p><code>nornir-pyxl</code> includes <code>pyxl_map_data</code> command, but it does not work int <code>nornir_cli</code> and was added to command exceptions</p>"},{"location":"examples/#-help","title":"--help","text":"<p>The help option can be used anywhere, for example:</p> <pre><code>$ nornir_cli nornir-netmiko init -u username -p password filter \\\n--hosts -a -s 'name__contains=dev_1 device_role__name__contains=leaf' \\\nnetmiko_save_config --help\nUsage: nornir_cli nornir-netmiko netmiko_save_config [OPTIONS] [ARGUMENTS]\n\n  Execute Netmiko save_config method\n\n      Arguments: cmd(str, optional): Command used to save the configuration.\n      confirm(bool, optional): Does device prompt for confirmation before\n      executing save operation confirm_response(str, optional): Response send\n      to device when it prompts for confirmation\n\n      Returns: nornir Result attributes(optional), statistic, progress\n      bar(optional)\n\nOptions:\n  --pg_bar                        Progress bar flag\n  --print_result / --no_print_result\n                                  print_result from nornir_utils  [default:\n                                  print_result]\n  --print_stat / --no_print_stat  Print Result statistic for Nornir object\n                                  [default: print_stat]\n  --cmd TEXT                      [default: ]\n  --confirm BOOLEAN               [default: False]\n  --confirm_response TEXT         [default: ]\n  --help                          Show this message and exit.\n\n\n$ nornir_cli nornir-netmiko init --help -u username -p password \\\nfilter --hosts -a -s 'name__contains=dev_1 device_role__name__contains=leaf' \\\nnetmiko_save_config\nUsage: nornir_cli nornir-netmiko init [OPTIONS]\n\n  Initialize nornir with a configuration file, with code or with a combination\n  of both.\n\nOptions:\n  -c, --config_file PATH          Path to configuration file  [default:\n                                  config.yaml]\n  -f, --from_dict TEXT            InitNornir dictionary arguments (json\n                                  string)\n  -co, --connection_options TEXT  Specify any connection parameters (json\n                                  string)\n  -d, --dry_run BOOLEAN           Whether to simulate changes or not\n                                  [default: False]\n  -u, --username TEXT             Default username\n  -p, --password TEXT             Default password\n  -cou, --count INTEGER           Number of elements you want to show\n  -g, --groups                    Show groups list\n  -h, --hosts                     Show hosts list\n  -i, --inventory [hosts|groups|defaults|all]\n                                  Show hosts, groups or defaults inventory\n  --help                          Show this message and exit.\n\n\n$ nornir_cli nornir-netmiko init -u username -p password filter --help \\\n--hosts -a -s 'name__contains=dev_1 device_role__name__contains=leaf' \\\nnetmiko_save_config\nUsage: nornir_cli nornir-netmiko filter [OPTIONS] [F]\n\n  Do simple or advanced filtering that will enable us to operate on groups of\n  hosts based on their properties.\n\nOptions:\n  -a, --advanced_filter           Use an advanced filtering (string)\n  -cou, --count INTEGER           Number of elements you want to show\n  -g, --groups                    Show groups list\n  -h, --hosts                     Show hosts list\n  -i, --inventory [hosts|groups|defaults|all]\n                                  Show hosts, groups or defaults inventory\n  -s, --save                      Save filtered Nornir object to pickle file\n                                  for later use\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"examples/#logging","title":"Logging","text":"<p>By default, Nornir logs to a <code>nornir.log</code> file.  For logging to console configure <code>logging</code> parameter in <code>config.yaml</code> or do <code>init</code> from dictionary, as instance: <pre><code>$ nornir_cli nornir-netmiko init -c \"\" -f 'inventory={\"plugin\":\"NetBoxInventory2\", \\\n\"options\": {\"nb_url\": \"http://your_netbox_domain\", \"nb_token\": \"your_netbox_token\", \\\n\"ssl_verify\": false}} runner={\"plugin\": \"threaded\", \"options\": {\"num_workers\": 50}} \\\nlogging={\"enabled\":true, \"level\": \"DEBUG\", \"to_console\": true}'\n</code></pre></p>"},{"location":"useful/","title":"Useful","text":""},{"location":"useful/#click-multi-commands-feature","title":"Click Multi Commands feature","text":"<p>All commands are loaded 'lazily' from different plugins (Click Multi Commands + Click Multi Commands example). This applies to Nornir plugins and manually written plugins.</p> <p>In <code>nornir_cli</code> Click Multi Commands feature is implemented through class inheritance, created dynamically from <code>class_factory</code> function in <code>nornir_cli/nornir_cli.py</code>.  So, you can easily implement your command in <code>nornir_cli</code>, by following the rules described in <code>class_factory</code> function.  Add your command to one of the directories:</p> <ul> <li>nornir_cli/common_commands - here are the commands common to all groups/plugins. Here you will find such commands like <code>init</code>, <code>filter</code>, <code>show_inventory</code>, <code>print_result</code>, <code>write_result</code>, <code>write_results</code>, <code>write_file</code></li> <li>nornir_cli/plugin_commands - here are the commands, that run single Tasks based on Nornir plugins</li> <li>nornir_cli/custom_commands - directory for your custom commands based on Nornir</li> </ul> <p>Where is these directories? If you installed <code>nornir_cli</code> from pip: <pre><code>$ pip show nornir_cli\n...\nLocation: /home/user/virtenvs/3.8.4/lib/python3.8/site-packages\n...\n$ ls /home/user/virtenvs/3.8.4/lib/python3.8/site-packages/nornir_cli\ncommon_commands  custom_commands  __init__.py  nornir_cli.py  plugin_commands  transform\n</code></pre></p> <p>If you installed <code>nornir_cli</code> from git: <pre><code>$ ls nornir_cli\ncommon_commands  custom_commands  __init__.py  nornir_cli.py  plugin_commands  __pycache__  transform\n</code></pre></p>"},{"location":"useful/#custom-runbooks","title":"Custom runbooks","text":""},{"location":"useful/#how-to-add-custom-nornir-runbook","title":"How to add custom nornir runbook","text":"<p>You can add a collection of your custom Nornir runbooks in <code>nornir_cli</code> and run them for any Hosts, managing the Inventory using <code>nornir_cli</code>, directly from the CLI.</p> <p>All custom Nornir runbooks stored in <code>custom_commands</code> directory (see Click Multi Commands feature). To create custom groups and add your Nornir runbook to these groups you need to:</p> <ul> <li> <p>take and wrap your runbook in a wrapper and run it inside that wrapper     <pre><code>from nornir_cli.common_commands import custom\n\n\n@custom\ndef cli(ctx):\n    \"\"\"\n    runbook description\n    \"\"\"\n    def nornir_runbook(task):\n    # code\n    # ...\ntask = ctx.nornir.run(task=nornir_runbook)\n</code></pre></p> <p><code>cli</code> is a new <code>click.command</code></p> <p><code>ctx</code> after decorating with <code>@custom</code> is an <code>CustomContext</code> class object. It has 2 attributes, by default: - <code>ctx.nornir</code> - current <code>nornir.core.Nornir</code>. This is a mutable object, but it can contain <code>nornir.core.Nornir</code> class object only - <code>ctx.result</code> - current <code>nornir.core.task.Result</code> object. This is a mutable object. It works with built-in commands, such a <code>print_result</code>, <code>write_result</code>, <code>write_results</code></p> <p>At any time, you can create a new attribute (for example, <code>ctx.new_attr_0</code>, <code>ctx.new_attr_1</code>, etc.) and save any data/python object to it. The state of <code>ctx</code> object is saved and you can pass it between your custom Nornir runbooks. This is very useful and allows you to divide a large task into several small ones and run them in the required order from the <code>nornir_cli</code> interface</p> <p>An important point is that only <code>ctx.nornir</code> object errors are processed, other errors are not processed to make code debugging easier</p> </li> <li> <p>name a file with your runbook as <code>cmd_something.py</code> (replace <code>something</code> on your own). <code>something</code> between <code>cmd_</code> and <code>.py</code> will be command name</p> </li> <li> <p>create directory tree in <code>custom_commands</code> direcotry and put your nornir runbooks there. Here the directories are new <code>nornir_cli</code> groups, and nornir runbooks are new commands. Easy-peasy. </p> <p>For example, i created two directories, <code>dhcp</code> and <code>mpls</code>, and put my runbooks there. Let's check <code>nornir_cli</code>:</p> directory tree:nornir_cli:nornir_cli dhcp:nornir_cli mpls: <pre><code>$ tree ~/virtenvs/py3.8.4/lib/python3.8/site-packages/nornir_cli/custom_commands/\n/home/user/virtenvs/py3.8.4/lib/python3.8/site-packages/nornir_cli/custom_commands/\n\u251c\u2500\u2500 dhcp\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 cmd_dhcp_snooping.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 templates\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 dhcp_snooping.j2\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 disp_int.template\n\u251c\u2500\u2500 __init__.py\n\u2514\u2500\u2500 mpls\n    \u2514\u2500\u2500 cmd_ldp_config.py\n\n3 directories, 5 files\n</code></pre> <pre><code>$ nornir_cli\nUsage: nornir_cli [OPTIONS] COMMAND [ARGS]...\n\n  Nornir CLI\n\n  Orchestrate your Inventory and start Tasks and Runbooks\n\nOptions:\n  --version  Show the version and exit.\n  --help     Show this message and exit.\n\nCommands:\n  dhcp\n  mpls\n  nornir-f5        nornir_f5 plugin\n  nornir-http      nornir_http plugin\n  nornir-jinja2    nornir_jinja2 plugin\n  nornir-napalm    nornir_napalm plugin\n  nornir-netconf   nornir_netconf plugin\n  nornir-netmiko   nornir_netmiko plugin\n  nornir-paramiko  nornir_paramiko plugin\n  nornir-pyez      nornir_pyez plugin\n  nornir-pyxl      nornir_pyxl plugin\n  nornir-scrapli   nornir_scrapli plugin\n</code></pre> <pre><code>$ nornir_cli dhcp\nUsage: nornir_cli dhcp [OPTIONS] COMMAND1 [ARGS]... [COMMAND2 [ARGS]...]...\n\n\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  change_credentials  Change username and password\n  dhcp_snooping       Configure dhcp snooping\n  filter              Do simple or advanced filtering\n  init                Initialize a Nornir\n  print_result        print_result from nornir_utils\n  show_inventory      Show current inventory\n  write_file          Write_file, but not from nornir_utils\n  write_result        Write `Result` object to file\n  write_results       Write `Result` object to files\n</code></pre> <pre><code>$ nornir_cli mpls\nUsage: nornir_cli mpls [OPTIONS] COMMAND1 [ARGS]... [COMMAND2 [ARGS]...]...\n\n\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  change_credentials  Change username and password\n  filter              Do simple or advanced filtering\n  init                Initialize a Nornir\n  print_result        print_result from nornir_utils\n  show_inventory      Show current inventory\n  write_file          Write_file, but not from nornir_utils\n  write_result        Write `Result` object to file\n  write_results       Write `Result` object to files\n  ldp_config          Configure ldp\n</code></pre> </li> </ul> <p>Runbook collections features:</p> <ul> <li>empty directories are not displayed as <code>nornir_cli</code> groups</li> <li>the commands are displayed only in the latest directories in the directory tree. This is based on the <code>command chains</code> ability of <code>nornir_cli</code> and on the fact that it's impossible to build <code>command chains</code>  in parent and child groups. That is a fair constraint related with Click Multi Commands and Multi Commands Chaining</li> <li> <p>you may have noticed, that in the example above, there is a <code>templates</code> directory in the <code>dhcp</code> directory and it was not displayed. <code>templates</code> and <code>__pycache__</code> are included in the <code>custom_exceptions</code>list in <code>nornir_cli.py</code>. But you can use these names for the parent directories. </p> <p>If you want to add your exceptions without fixing <code>custom_exceptions</code> list, use the <code>NORNIR_CLI_GRP_EXCEPTIONS</code> environment variable:</p> <pre><code># as instance, to add temp and tmp groups to custom_exceptions list\n$ export NORNIR_CLI_GRP_EXCEPTIONS=temp,tmp\n</code></pre> </li> <li> <p>if to add runbooks to <code>custom_commands</code> without <code>runbook collection</code>, they will be in <code>custom</code> group</p> </li> <li>all python modules, used in your runbook, must be installed in the virtual environment, otherwise the runbook will not be displayed as command in <code>nornir_cli</code></li> </ul> <p>See example and Examples.</p> <p>And let's look at an simple example:</p> directory tree:init and filter Nornir object:cmd_first_command.py:cmd_second_command.py:run custom commands: <pre><code>$ tree ~/virtenvs/py3.8.4/lib/python3.8/site-packages/nornir_cli/custom_commands/\n/home/user/virtenvs/py3.8.4/lib/python3.8/site-packages/nornir_cli/custom_commands/\n\u251c\u2500\u2500 cmd_first_command.py\n\u251c\u2500\u2500 cmd_second_command.py\n\u2514\u2500\u2500 __init__.py\n\n1 directories, 3 files\n</code></pre> <pre><code># InitNornir with NetBox Inventory\n$ nornir_cli custom init -u username -p password -c None -f 'inventory={\"plugin\":\"NetBoxInventory2\", \"options\": {\"nb_url\": \"http://your_netbox_domain\", \"nb_token\": \"your_netbox_token\", \"ssl_verify\": false}} runner={\"plugin\": \"threaded\", \"options\": {\"num_workers\": 50}} logging={\"enabled\":true, \"level\": \"DEBUG\", \"to_console\": true}'\n\n# filter dev_1\n$ nornir_cli custom filter --hosts -s name=dev_1\n[\n    \"dev_1\"\n]\n</code></pre> <pre><code>from nornir.core.plugins.connections import ConnectionPluginRegister\n\nfrom nornir_cli.common_commands import custom\n\nfrom nornir_netmiko import netmiko_send_command\n\n\n@custom\ndef cli(ctx):\n    ConnectionPluginRegister.auto_register()\n\n    res = ctx.nornir.run(\n        task=netmiko_send_command, name=\"display clock\", command_string=\"disp clock\"\n    )\n\n    # we will use print_result command for res\n    ctx.result = res\n    # create new attributes\n    ctx.simple_object = \"simple object\"\n    ctx.complex_object = \"complex object\"\n</code></pre> <pre><code>from nornir.core.plugins.connections import ConnectionPluginRegister\n\nfrom nornir_cli.common_commands import custom\n\nfrom nornir_netmiko import netmiko_send_command\n\n\n@custom\ndef cli(ctx):\n    ConnectionPluginRegister.auto_register()\n\n    res = ctx.nornir.run(\n        task=netmiko_send_command, name=\"display interface brief\", command_string=\"disp int br\"\n    )\n\n    # we will use print_result command for res\n    ctx.result = res\n    # print attributes from first_command\n    print()\n    print(\"ctx.simple_object from first_command:\", ctx.simple_object, end=f\"\\n{'-' * 10}\\n\")\n    print(\"ctx.complex_object from first_command:\", ctx.complex_object)\n    print()\n</code></pre> <pre><code>$ nornir_cli custom first_command print_result second_command print_result\ndisplay clock*******************************************************************\n* dev_1 ** changed : False *****************************************************\nvvvv display clock ** changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO\n\n2021-10-04 11:55:46\nMonday\nTime Zone(Moscow) : UTC+03:00\n^^^^ END display clock ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nctx.simple_object from first_command: simple object\n----------\nctx.complex_object from first_command: complex object\n\ndisplay interface brief*********************************************************\n* dev_1 ** changed : False *****************************************************\nvvvv display interface brief ** changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO\n...\nInUti/OutUti: input utility/output utility\nInterface                   PHY   Protocol InUti OutUti   inErrors  outErrors\nEthernet0/0/1               up    up       0.01%  0.18%          0          0\n...\n^^^^ END display interface brief ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre>"},{"location":"useful/#click-complex-applications","title":"Click Complex Applications","text":"<p>About Click Complex Application</p> <p>Click complex app example</p> <p>An important role in <code>nornir_cli</code> is given to the Context object. As instance, if we run that command: <pre><code>$ nornir_cli nornir-scrapli init -u username -p password \\\n-co '{\"scrapli\": {\"platform\": \"huawei_vrp\", \"extras\":{\"ssh_config_file\": true}}}' \\\nfilter --hosts -s '{\"name\":\"dev_1\"}' send_command '{\"command\":\"display clock\"}' \\\nsend_interactive '{\"interact_events\":[[\"save\", \"Are you sure to continue?[Y/N]\", false], \\\n[\"Y\", \"Save the configuration successfully.\", true]]}'\n</code></pre> Context object will be: <pre><code>{\n    'queue_functions':\n    [\n        {\n            &lt;function send_interactive at 0x7f01839ba280&gt;:\n            {\n            'interact_events': &lt;class 'inspect._empty'&gt;,\n            'failed_when_contains': None,\n            'privilege_level': '',\n            'timeout_ops': None\n            }\n        }\n    ],\n    'queue_parameters':\n    {\n        &lt;function send_interactive at 0x7f01839ba280&gt;:\n        {\n            'interact_events': &lt;class 'inspect._empty'&gt;,\n            'failed_when_contains': None,\n            'privilege_level': '', 'timeout_ops': None\n        }\n    },\n    'nornir_scrapli': &lt;module 'nornir_scrapli' from '/home/user/virtenvs/3.8.4/lib/python3.8/site-packages/nornir_scrapli/__init__.py'&gt;,\n    'original': &lt;function send_interactive at 0x7f01839ba280&gt;,\n    'queue_functions_generator': &lt;generator object decorator.&lt;locals&gt;.wrapper.&lt;locals&gt;.&lt;genexpr&gt; at 0x7f0182fafba0&gt;\n    # required_options for send_command\n    'required_options': ['command']}\n    # required_options for send_interactive\n    'required_options': ['interact_events']}\n}\n</code></pre></p> <ul> <li><code>ctx.obj[\"queue_functions\"]</code> - queue(list) of dictionaries, where the key is original function, and the value is a set of argumetns. For Commands chains.</li> <li><code>ctx.obj[\"queue_parameters\"]</code> - last original function with arguments (from chain of commands)</li> <li><code>ctx.obj[plugin]</code> - where plugin is \"nornir_scrapli\"</li> <li><code>ctx.obj[\"original\"]</code> - last original function without arguments (from chain of commands)</li> <li><code>ctx.obj[\"queue_functions_generator\"]</code> - ctx.obj[\"queue_functions\"] in the form of a generator expression</li> <li><code>ctx.obj[\"required_options\"]</code> - list with required options for last plugin command</li> </ul> <p>If we run custom runbok (as instance, it's called <code>dhcp_snooping</code> from example above), then most likely we use a <code>@custom</code> decorator: <pre><code>$ nornir_cli custom dhcp_snooping\n</code></pre> and there is no Context object, but the first argument will be CustomContext object. See example.</p>"},{"location":"useful/#temppkl","title":".temp.pkl","text":"<p><code>.temp.pkl</code> - is temporary file that stores the last Nornir object with your Inventory. The Nornir object gets into this file after you run <code>init</code> command or <code>filter</code> command with <code>-s / --save</code> option.</p> <p>As instance:</p> init only:init and filter:filter only:without init and filter: <pre><code># this command saves the Nornir object with full Inventory to the .temp.pkl file \n# and runs send_command Task for all Hosts from Inventoy\n\n$ nornir_cli nornir-scrapli init send_command --command \"display clock\"\n</code></pre> <pre><code># this command saves the Nornir object with full Inventory to the .temp.pkl file\n# and then saves the Nornir object with filtered Inventory to the .temp.pkl file\n# and runs send_command Task for all Hosts from filtered Inventory\n\n$ nornir_cli nornir-scrapli init filter -s -a 'name__contains=spine' send_command --command \"display clock\"\n</code></pre> <pre><code># if we started init earlier, then we already have the Nornir object.\n# It will be enough to filter the Nornir Inventory and save it to temp.pkl\n\n$ nornir_cli nornir-scrapli filter -a 'name__contains=leaf' send_command '{\"command\":\"display clock\"}' send_command '{\"command\":\"display device\"}'\n</code></pre> <pre><code># if you run nornir_cli without init, filter commands,\n# the nornir_cli will try to take the last Nornir object from this file (temp.pkl) \n\n$ nornir_cli nornir-scrapli send_command --command \"display clock\"\n</code></pre> <p>Where is <code>temp.pkl</code>?</p> <pre><code># if nornir_cli was installed via pip\n\n$ la /home/user/virtenvs/3.8.4/lib/python3.8/site-packages/nornir_cli/common_commands/\ncmd_filter.py  cmd_init.py  cmd_show_inventory.py  common.py  __init__.py  __pycache__  .temp.pkl\n</code></pre>"},{"location":"useful/#transform-function","title":"Transform function","text":"<p>The transform function is implemented \"on the knee\". But, if you want to use it, then add your code to <code>adapt_host_data</code> from <code>nornir_cli/transform/fucntion.py</code> file and specify it in the <code>init</code>.</p>"},{"location":"useful/#environment-variables","title":"Environment Variables","text":"<p>The username and password can be taken from the environment variables. Start working with <code>nornir_cli</code> by exporting the environment variables:</p> <pre><code>export NORNIR_CLI_USERNAME=username\nexport NORNIR_CLI_PASSWORD=password\n</code></pre> <p>And with <code>NORNIR_CLI_GRP_EXCEPTIONS</code> environment variable you can exclude directoiries from being displayed in <code>Runbook collections</code> (see here)</p> <p>Or you can permanently declare environment variables using <code>.bash_profile</code> file:</p> <pre><code>cd ~\nopen .bash_profile\n# add to file\nexport NORNIR_CLI_USERNAME=username\nexport NORNIR_CLI_PASSWORD=password\n# save the text file and refresh the bash profile\nsource .bash_profile\n</code></pre> <p>And now you can do <code>init</code> command</p>"},{"location":"useful/#what-else-can-nornir_cli-be-useful","title":"What else can nornir_cli be useful","text":""},{"location":"useful/#useful-functions","title":"Useful functions","text":"<ul> <li> <p><code>print_stat</code></p> <p>use <code>print_stat</code> to add statistic to your nornir runbook</p> <p><pre><code>from nornir_cli.common_commands import print_stat \n\n# code\n# ...\n\nprint_stat(nr, result)\n# where is :nr: is nornir.core.Nornir object\n# :result: is nornir.core.task.Result object\n</code></pre> The <code>print_stat</code> function show statistic in the following format:</p> <pre><code>dev_1                                             : ok=1               changed=0               failed=0\ndev_2                                             : ok=1               changed=0               failed=0\ndev_3                                             : ok=1               changed=0               failed=0\n\nOK      : 3\nCHANGED : 0\nFAILED  : 0\n</code></pre> </li> <li> <p><code>print_result</code></p> <p>It is the same function as <code>print_result</code> from <code>nornir_utils</code>, but with count parameter. </p> <p><code>count</code> - number of sorted results. It's acceptable to use numbers with minus sign (-5 as example), then results will be from the end of results list. With <code>count</code> parameter you can output first <code>n</code> results or latest <code>n</code> results.</p> <pre><code>from nornir_cli.common_commands import print_result\n\n# code\n# ...\n\nprint_result(result, vars=[\"result\", \"diff\"], count=-10)\n# :result: is nornir.core.task.Result object\n</code></pre> </li> <li> <p><code>write_result</code></p> <p>Result can be written to a file using <code>write_result</code> function for all hosts from current Inventory. </p> <p>By default, <code>write_result</code>  tries to create a file in the current directory or in the specified directory, if file doesn't exist. </p> <p><code>write_result</code> function has many parameters. For example, you can exclude errors from a file, write \"diff\" to another file or output it, use different write modes, limit entries number, etc.</p> <pre><code>from nornir_cli.common_commands import write_result\n\n# code\n# ...\n\nwrite_result(result, filename=\"result.txt\", vars=[\"result\", \"diff\"], count=-10,\nno_errors=True)\n# :result: is nornir.core.task.Result object\n</code></pre> </li> <li> <p><code>write_results</code></p> <p>Result can be written to a files with hostnames as filenames using <code>write_results</code> function for all hosts from current Inventory. For example, it is usefull for diagnostic commands, that run many <code>show something</code> or <code>display something</code> commands.</p> <p>By default, <code>write_results</code>  tries to create a specified directory, if it doesn't exist.</p> <p><code>write_results</code> command has the same parameters as <code>write_result</code>, but uses <code>-d</code> or <code>--dirname</code> instead of <code>-f</code> or <code>--filename</code>:</p> <pre><code>from nornir_cli.common_commands import write_results\n\n# code\n# ...\n\nwrite_results(result, dirname=\"results\", vars=[\"result\", \"diff\"], no_errors=True)\n# :result: is nornir.core.task.Result object\n</code></pre> </li> <li> <p><code>_pickle_to_hidden_file</code></p> <p>If you don't want to use <code>runbook collections</code> you can use <code>nornir_cli</code> for inventory management only.</p> <p>You can get <code>nornir.core.Nornir</code> object with inventory, filter this inventory and save it using <code>nornir_cli</code>, and then use the result:</p> <pre><code># get nornir.core.Nornir object, filter inventory and save it\n$ nornir_cli init nornir-scrapli filter -s -a 'name__contains=dev'\n</code></pre> <pre><code>from nornir_cli.common_commands import _pickle_to_hidden_file\n\ndef cli(nr):\n    def task(task):\n    # code\n    # ...\n\nif __name__ == \"__main__\":\n    # get current nornir.core.Nornir object from nornir_cli\n    nr = _pickle_to_hidden_file(\"temp.pkl\", mode=\"rb\", dump=False)\n    # run task with this object\n    cli(nr)\n</code></pre> </li> </ul>"},{"location":"useful/#nornir_jinja2-plugin","title":"nornir_jinja2 plugin","text":"<p>Why is the <code>nornir_jinja2</code> plugin here? And then, together with NetBox, this is a really useful thing. You can use NetBox as a variable source for jinja2 templates. Then <code>nornir_cli</code> can replace the tool for generating configs. It also motivates you to keep NetBox up-to-date as a Source of Truth. And we need such a motivation, based on the connectivity of different tools.</p>"},{"location":"useful/#how-to-craft-xml-from-yang","title":"How to craft xml from yang","text":"<p>When using <code>scrapli_netconf</code> from <code>nornir_cli</code>, you may find it useful to be able to get xml from yang. Easy way to get xml from yang:</p> <ul> <li>get a model for your vedor. As instance, here</li> <li>export yang to html, and copy the path: <pre><code>cd /to/directory/with/yang/models\n\n# use pyang tool\n# huawei is here as example only\n\n$ pyang -f jstree -o huawei-ifm.html huawei-ifm.yang\n\n# open html in browser\n\n$ open huawei-ifm.html\n</code></pre></li> <li>find the path and remove unwanted: <pre><code>$ echo \"/ifm:ifm/ifm:interfaces/ifm:interface/ifm:ifName\" | sed 's/ifm://g'\n/ifm/interfaces/interface/ifName\n</code></pre></li> <li>filter the pyang output sample-xml-skeleton using the --sample-xml-skeleton-path and get xml: <pre><code>$ pyang -f sample-xml-skeleton --sample-xml-skeleton-path \\\n\"/ifm/interfaces/interface/ifName\" huawei-ifm.yang | tr -d \"\\n\" \\\n| sed -r 's/&gt;\\s+&lt;/&gt;&lt;/g'\n\n&lt;?xml version='1.0' encoding='UTF-8'?&gt;&lt;data xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"&gt;\n&lt;ifm xmlns=\"http://www.huawei.com/netconf/vrp/huawei-ifm\"&gt;&lt;interfaces&gt;&lt;interface&gt;&lt;ifName/&gt;\n&lt;/interface&gt;&lt;/interfaces&gt;&lt;/ifm&gt;&lt;/data&gt;\n</code></pre></li> <li>run <code>scrapli_netconf</code>, <code>nornir_netconf</code>, <code>nornir_pyez</code> from <code>nornir_cli</code></li> </ul> <p>Thanks hellt for this tutorial.</p> <p>Sources:</p> <ul> <li>zero</li> <li>one</li> <li>two</li> </ul>"},{"location":"useful/#command-exceptions","title":"Command exceptions","text":"<p><code>nornir_cli v1.3.0</code> includes some commands, that require a unique python runner:</p> <p>nornir-netmiko netmiko_send_command with use_timing option:</p> <p>Current python runner (see <code>nornir_cli/plugin_commands/cmd_common.py</code>) does not check the output, by default, so, now, it will not be possible to add conditions to the check, as described in the example. </p> <p><code>use_timing</code> option works, but it doesn't make sense.</p> <p>You can use <code>nornir-scrapli send_interactive</code> method instead of <code>nornir-netmiko netmiko_send_command</code> with <code>use_timing</code> option. See example here</p> <p>nornir-scrapli cfg_load_config:</p> <p><code>scrapli cfg_load_config</code> has <code>**kwargs</code> parameters, that depends on platforms. Python runner for <code>nornir_cli</code> version <code>&lt;=1.2.0</code> did not support passing any additional arguments, but starting from <code>nornir_cli</code> version <code>1.3.0</code>, you can pass any additional arguments as a json string: <pre><code>$ nornir_cli nornir-scrapli cfg_load_config '{\"config\": \"...\" \"any\":\"arguments\"}'\n</code></pre> This rule works for any Nornir plugin command without an unique set of <code>**kwargs</code> parameters.</p> <p>nornir-pyxl pyxl_map_data:</p> <p><code>pyxl_map_data</code> command was excluded from <code>nornir_cli</code> - <code>Nested Dict Magic Key</code> is not supported now.</p>"},{"location":"workflow/","title":"Workflow","text":"<p><code>nornir_cli</code> has a workflow that is familiar to the nornir user. There is:</p> <ul> <li>Initializing Nornir</li> <li>Inventory</li> <li>Tasks and runbooks</li> </ul> <p>You can run a workflow as a single command or you can split it into parts </p>"},{"location":"workflow/#initializing-nornir","title":"Initializing Nornir","text":"<p>You can initialize nornir with a configuration file, with code or with a combination of both.</p>"},{"location":"workflow/#with-configuration-file","title":"With configuration file","text":"<p>Let's start with a configuration file. It is a typical Nornir configuration file.</p> <p>By default, <code>nornir_cli</code> uses <code>config.yaml</code> in your current working directory. But you can specify path to your own configuration file with option <code>--config_file</code> or <code>-c</code>: <pre><code># with default config.yaml in current working directory\n$ nornir_cli nornir-netmiko init\n\n# with path to config_file\n$ nornir_cli nornir-netmiko init -c ~/config.yaml\n</code></pre> Why is <code>nornir-netmiko</code> here? <code>nornir_cli</code> runs Tasks based on Nornir plugins or your custom Nornir runbooks, so the first step is to select an available plugin or custom group (see Runbook collections).</p> <p>For version <code>1.3.0</code>, the following Nornir plugins are available: <pre><code>$ nornir_cli --help\nUsage: nornir_cli [OPTIONS] COMMAND [ARGS]...\n\n  Nornir CLI\n\n  Orchestrate your Inventory and start Tasks and Runbooks\n\nOptions:\n  --version  Show the version and exit.\n  --help     Show this message and exit.\n\nCommands:\n  nornir-f5        nornir_f5 plugin\n  nornir-http      nornir_http plugin\n  nornir-jinja2    nornir_jinja2 plugin\n  nornir-napalm    nornir_napalm plugin\n  nornir-netconf   nornir_netconf plugin\n  nornir-netmiko   nornir_netmiko plugin\n  nornir-paramiko  nornir_paramiko plugin\n  nornir-pyez      nornir_pyez plugin\n  nornir-pyxl      nornir_pyxl plugin\n  nornir-routeros  nornir_routeros plugin\n  nornir-scrapli   nornir_scrapli plugin\n</code></pre></p>"},{"location":"workflow/#without-a-configuration-file","title":"Without a configuration file","text":"<p>You can initialize nornir programmatically without a configuration file.</p> <p><code>-f</code> or <code>--from_dict</code> option waits json string:</p> <p><code>-c</code> or <code>--config_file</code> can be <code>\"\"</code>, <code>None</code>, <code>null</code></p> <p>Here you can pass parameters as json strings using \"=\" or without it. In the case of \"=\", the <code>nornir_cli</code> completely repeats the syntax from Nornir runbooks, and you can use the Nornir configuration patterns that are already familiar to you (or see the Nornir docs). In the case without using \"=\", you can pass all parameters as a json string. This can be useful in scripts or automation pipelines, when using <code>nornir_cli</code> with json utilities such as <code>jq</code>, <code>jc</code>.  This way(json string using \"=\" or json string without \"=\") you can pass parameters to initializing, filtering and Nornir plugins/tasks running processes.</p> <p>Examples:</p> json string using '=':json string: <pre><code>$ nornir_cli nornir-netmiko init -c \"\" -f 'inventory={\"plugin\":\"NetBoxInventory2\", \\\n\"options\": {\"nb_url\": \"http://your_netbox_domain\", \"nb_token\": \"your_netbox_token\", \\\n\"ssl_verify\": false}} runner={\"plugin\": \"threaded\", \"options\": {\"num_workers\": 50}} \\\nlogging={\"enabled\":true, \"level\": \"DEBUG\", \"to_console\": true}'\n</code></pre> <pre><code>$ nornir_cli nornir-netmiko init -c \"\" -f '{\"inventory\":{\"plugin\":\"NetBoxInventory2\", \\\n\"options\": {\"nb_url\": \"http://your_netbox_domain\", \"nb_token\": \"your_netbox_token\", \\\n\"ssl_verify\": false}}, \"runner\":{\"plugin\": \"threaded\", \"options\": {\"num_workers\": 50}}, \\\n\"logging\":{\"enabled\":true, \"level\": \"DEBUG\", \"to_console\": true}}'\n</code></pre> <p>Or you can initialize nornir with a combination of both methods:</p>"},{"location":"workflow/#both-ways","title":"Both ways","text":"json string using '=':the same thing, but without '=': <pre><code>$ nornir_cli nornir-netmiko init -f 'runner={\"plugin\": \"threaded\", \"options\": {\"num_workers\": 50}}'\n</code></pre> <pre><code>$ nornir_cli nornir-netmiko init -f '{\"runner\":{\"plugin\": \"threaded\", \"options\": {\"num_workers\": 50}}}'\n</code></pre> <p><code>-c</code> or <code>--config_file</code> uses <code>config.yaml</code> in your current working directory, by default, so there is no <code>-c</code> option and only <code>-f</code> option here</p>"},{"location":"workflow/#inventory","title":"Inventory","text":"<p><code>nornir_cli</code> follows <code>Nornir</code> filtering interface.</p> <p><code>init</code> returns nornir.core.Nornir object, which saved to <code>temp.pkl</code> file for future reference. <code>init</code> is enough to perform once in any way described above. After that, you can filter inventory.</p> <p>Now, let's take nornir_netbox inventory plugin and do <code>init</code>, at first:</p> <p>config.yaml: <pre><code># we will use NetBox Inventory\ninventory:\nplugin: NetBoxInventory2\noptions:\n  nb_url: \"http://your_nebox_domain\"\n  nb_token: \"your_netbox_token\"\n  ssl_verify: False\n</code></pre></p> <p>init: <pre><code># -u / --username and -p / --password  will assign a username and password in defaults\n# -co / --connection_options will assign options for Scrapli framework\n# huawei is here just as an example\n$ nornir_cli nornir-scrapli init -u username -p password -co '{\"scrapli\": {\"platform\": \"huawei_vrp\", \"extras\":{\"ssh_config_file\": true}}}'\n</code></pre></p> <p>And now let's filter NetBox inventory, as instance:</p>"},{"location":"workflow/#filtering","title":"Filtering","text":"simple filtering:simple filtering with json string:advanced filtering: <pre><code># let's filter current inventory and get dev_1 inventory object \n# --hosts shows filtered hosts list\n$ nornir_cli nornir-scrapli filter --hosts name=dev_1\n[\n    \"dev_1\"\n]\n</code></pre> <pre><code># --inventory=host shows \"hosts\" inventory parameters for filtered hosts (dev_1 in example)\n# --hosts shows filtered hosts list\n# huawei is here just as an example\n$ nornir_cli nornir-scrapli filter --inventory=hosts --hosts 'primary_ip={\"address\": \"10.1.0.1/32\", \"family\": 4, \"id\": 13, \"url\": \"http://your_netbox_domain/api/ipam/ip-addresses/13/\"} name=dev_1'\n\n# or an alternative way(json string without \"=\")\n# $ nornir_cli nornir-scrapli filter --inventory=hosts --hosts '{\"primary_ip\":{\"address\": \"10.1.0.1/32\", \"family\": 4, \"id\": 13, \"url\": \"http://your_netbox_domain/api/ipam/ip-addresses/13/\"}, \"name\":\"dev_1\"}'\n{\n    \"hosts\": {\n        \"dev_1\": {\n            \"name\": \"dev_1\",\n            \"connection_options\": {},\n            \"groups\": [],\n            \"data\": {\n                \"id\": 13,\n                \"name\": \"dev_1\",\n                \"display_name\": \"dev_1\",\n                \"device_type\": {\n\n            ...\n\n            \"hostname\": \"10.1.0.1\",\n            \"port\": null,\n            \"username\": \"username\",\n            \"password\": \"password\",\n            \"platform\": \"huawei\"\n        }\n    } \n}\n[\n    \"dev_1\"\n]\n</code></pre> <pre><code># --hosts shows filtered hosts list\n# -a / --advanced option enables advanced filtering\n$ nornir_cli nornir-scrapli filter --hosts -a 'name__contains=dev_1 device_role__name__contains=spine'\n[\n    \"dev_1\"\n]\n\n# the same with &amp;\n$ nornir_cli nornir-scrapli filter --hosts -a 'name__contains=dev_1 &amp; device_role__name__contains=spine'\n[\n    \"dev_1\"\n]\n\n# or |\n$ nornir_cli nornir-scrapli filter --hosts -a 'name__contains=dev_1 | name__contains=dev_2'\nAre you sure you want to output list of all required hosts on stdout? [Y/n]:\n[\n    \"dev_1\"\n    \"dev_2\"\n]\n\n# another example\n# --count shows the first 3 items from filtered inventory (for hosts list with --hosts option in example)\n$ nornir_cli nornir-netmiko filter --hosts --count 3 -a 'data__device_type__model__contains=S2320-28TP-EI-DC &amp; name__contains=dev_ | data__device_type__model__contains=S2320-28TP-EI-DC &amp; name__contains=access'\n[\n    \"dev_1\"\n    \"dev_2\"\n    \"access_1\"\n]\n</code></pre> <p>By default, the filtered Inventory is not saved for future reference. It was done to perform <code>init</code> only once, and then to filter Inventory and run any commands from Nornir Plugins (see available plugins with <code>nornir_cli --help</code> command) or Nornir Runbooks (see Runbook collections) as a single command (see Command chains). This is useful and saves time on <code>init</code> with large inventories.</p> <p>But, you can save the Inventory state after filtering with <code>-s</code> or <code>--save</code> option and work with new Inventory object. So any commands from Nornir Plugins or Nornir Runbooks will be run for the saved object.</p> <p>Filter Inventory ans save it as much as needed. Perform <code>init</code> if you need to return full Inventory state again.</p> <p>As instance, let's save Inventory after simple filtering: <pre><code># get new inventory object with single host (dev_1)\n# --hosts shows filtered and saved hosts\n$ nornir_cli nornir-scrapli filter --hosts -s name=dev_1\n[\n    \"dev_1\"\n]\n</code></pre></p> <p>IMPORTANT: if you want to save the Inventory state after filtering for future references, please use <code>--save</code> or <code>-s</code> option.</p>"},{"location":"workflow/#show-inventory","title":"Show inventory","text":"<p>As you may have already noticed, it's possible to view the current inventory state with <code>show_inventory</code> command: <pre><code>$ nornir_cli nornir-scrapli show_inventory -i hosts -h -g --count 6\n# hosts inventory\n{\n    \"hosts\": {\n        \"dev_1\": {\n            \"name\": \"dev_1\",\n            \"connection_options\": {},\n            \"groups\": [],\n            \"data\": {\n                \"id\": 13,\n                \"name\": \"dev_1\",\n                \"display_name\": \"dev_1\",\n                \"device_type\": {\n\n            ...\n\n            \"hostname\": \"10.1.0.1\",\n            \"port\": null,\n            \"username\": \"username\",\n            \"password\": \"password\",\n            \"platform\": \"huawei\"\n        }\n    }\n}\n        ...  # there is 6 Hosts Inventory in json format\n# hosts list\n[\n    \"dev_1\"\n    \"dev_2\"\n    \"dev_3\"\n    \"dev_4\"\n    \"dev_5\"\n    \"access_1\"\n]\n# groups list\n[]\n</code></pre> <code>-i</code> or <code>--inventory</code> option can be <code>hosts</code>, <code>groups</code>, <code>defaults</code> or <code>all</code>.</p> <p><code>-cou</code> or <code>--count</code> is counter, that refers to each requested parameter.</p> <p><code>-cou</code> or <code>--count</code> can be:</p> <ul> <li> <p><code>--count -100</code> - last 100 items</p> </li> <li> <p><code>--count 100</code> - first 100 items</p> </li> <li> <p><code>--count 0</code> - 0 items</p> </li> <li> <p>without <code>--count</code> option - all items (default value)</p> </li> </ul> <p>As instance:</p> to show the first 2 hosts from Inventory:to show the first 2 hosts, groups (if exist):to show the first 2 hosts and their hosts inventory:to show the first 2 hosts and all inventory: <p><pre><code>$ nornir_cli nornir-scrapli show_inventory -h -cou 2\n# hosts list for the first 2 hosts \n[\n    \"dev_1\"\n    \"dev_2\"\n]\n</code></pre> <code>-h</code> or <code>--hosts</code> option is default option, so the same is <code>nornir_cli nornir-scrapli show_inventory -cou 2</code>.</p> <p>For the latest 2 hosts from Inventory use <code>-cou -2</code></p> <pre><code>$ nornir_cli nornir-scrapli show_inventory -h -g -cou 2\n# hosts list for the first 2 hosts\n[\n    \"dev_1\"\n    \"dev_2\"\n]\n# groups list for the first 2 groups (groups don't exist)\n[]\n</code></pre> <pre><code>$ nornir_cli nornir-scrapli show_inventory -h -i hosts -cou 2\n# hosts inventory for the first 2 hosts\n{\n    \"hosts\": {\n        \"dev_1\": {\n            \"name\": \"dev_1\",\n            \"connection_options\": {},\n            \"groups\": [],\n            \"data\": {\n                \"id\": 13,\n                \"name\": \"dev_1\",\n                \"display_name\": \"dev_1\",\n                \"device_type\": {\n\n            ...\n\n            \"hostname\": \"10.1.0.1\",\n            \"port\": null,\n            \"username\": \"username\",\n            \"password\": \"password\",\n            \"platform\": \"huawei\"\n        }\n        \"dev_2\": {\n            \"name\": \"dev_2\",\n            \"connection_options\": {},\n            \"groups\": [],\n            \"data\": {\n                \"id\": 14,\n                \"name\": \"dev_2\",\n                \"display_name\": \"dev_2\",\n                \"device_type\": {\n\n            ...\n\n            \"hostname\": \"10.1.0.2\",\n            \"port\": null,\n            \"username\": \"username\",\n            \"password\": \"password\",\n            \"platform\": \"huawei\"\n        }\n    }\n}\n\n# hosts list for the first 2 hosts\n[\n    \"dev_1\"\n    \"dev_2\"\n]\n</code></pre> <p><pre><code>$ nornir_cli nornir-scrapli show_inventory -h -i all -cou 2\n# hosts inventory for the first 2 hosts\n{\n    \"hosts\": {\n        \"dev_1\": {\n            \"name\": \"dev_1\",\n            \"connection_options\": {},\n            \"groups\": [],\n            \"data\": {\n                \"id\": 13,\n                \"name\": \"dev_1\",\n                \"display_name\": \"dev_1\",\n                \"device_type\": {\n\n            ...\n\n            \"hostname\": \"10.1.0.1\",\n            \"port\": null,\n            \"username\": \"username\",\n            \"password\": \"password\",\n            \"platform\": \"huawei\"\n        }\n        \"dev_2\": {\n            \"name\": \"dev_2\",\n            \"connection_options\": {},\n            \"groups\": [],\n            \"data\": {\n                \"id\": 14,\n                \"name\": \"dev_2\",\n                \"display_name\": \"dev_2\",\n                \"device_type\": {\n\n            ...\n\n            \"hostname\": \"10.1.0.2\",\n            \"port\": null,\n            \"username\": \"username\",\n            \"password\": \"password\",\n            \"platform\": \"huawei\"\n        }\n    }\n}\n# groups inventory for the first 2 groups (groups don't exist)\n{\n    \"groups\": {}\n}\n# defaults inventory is always 1, so counter (`-cou` or `--count`) doesn't work for it\n{\n    \"defaults\": {\n        \"data\": {},\n        \"connection_options\": {},\n        \"hostname\": null,\n        \"port\": null,\n        \"username\": \"username\",\n        \"password\": \"password\",\n        \"platform\": null\n    }\n}\n# hosts list for the first 2 hosts\n[\n    \"dev_1\"\n    \"dev_2\"\n]\n</code></pre> <code>all</code> inventory here is the first 2 hosts, groups (groups don't exist in example) and defaults inventory parameters. Counter (<code>-cou</code> or <code>--count</code>) doesn't work for defaults, because defaults is always 1.</p> <p>And you can invoke <code>show_inventory</code> command from <code>init</code> or <code>filter</code> commands with <code>-i / --inventory</code>, <code>-h / --hosts</code>, <code>-g / --groups</code> options.</p>"},{"location":"workflow/#changing-credentials","title":"Changing credentials","text":"<p>You can change credentials in any time for current Inventory with <code>change_credentials</code> command.</p> <p>To save Inventory state for future references use <code>-s</code> or <code>--save</code> option.</p> <pre><code>$ nornir_cli nornir-scrapli change_credentials --help\nUsage: nornir_cli nornir-scrapli change_credentials [OPTIONS]\n\n  Change username and password for current Nornir object.\n\n  If no options are specified, the username and password will be changed for\n  defaults only, as instance:\n\n      nornir_cli nornir-scrapli change_credentials -u user -p password\n      show_inventory -i defaults\n\n  If only hosts or groups are specified (use string for single host and list\n  of strings for many hosts), then the username and password will be changed\n  only for them, as instance:\n\n      nornir_cli nornir-scrapli change_credentials -u user -p password -h\n      '[\"spine_1\"]'\n\n  To change the username and password for all hosts or groups, use \"all\" as\n  option value, as instance:\n\n      nornir_cli nornir-scrapli change_credentials -u user -p password -h\n      \"all\"\n\nOptions:\n  -u, --username TEXT  Hosts, groups or defaults username\n  -p, --password TEXT  Hosts, groups or defaults password\n  -h, --hosts TEXT     List of hosts (json string) or single host (str)\n  -g, --groups TEXT    List of groups (json string) or single group (str)\n  -d, --defaults       Defaults credentials\n  -s, --save           Save Nornir object with new credentials to pickle file\n                       for later use\n  --help               Show this message and exit.\n</code></pre> <p>Let's take nornir_netbox inventory plugin and do <code>init</code>, at first:</p> <p>config.yaml: <pre><code># we will use NetBox Inventory\ninventory:\nplugin: NetBoxInventory2\noptions:\n  nb_url: \"http://your_nebox_domain\"\n  nb_token: \"your_netbox_token\"\n  ssl_verify: False\n</code></pre></p> <p>init: <pre><code># -u / --username and -p / --password  will assign a username and password in defaults\n$ nornir_cli nornir-scrapli init -u username -p password\n</code></pre></p> <p>And now let's <code>change_credentials</code> for <code>defaults</code> Inventory and run <code>show_inventory</code> with new credentials: <pre><code># use -s option to save Inventory with new credentials for future references\n$ nornir_cli nornir-scrapli change_credentials -u user -p pass show_inventory -i defaults\n{\n    \"defaults\": {\n        \"data\": {},\n        \"connection_options\": {},\n        \"hostname\": null,\n        \"port\": null,\n        \"username\": \"user\",\n        \"password\": \"pass\",\n        \"platform\": null\n    }\n}\n</code></pre></p> <p><code>change_credentials</code> for all <code>hosts</code> and check <code>hosts</code> Inventory with new credentials (you can do the same for <code>groups</code> Inventory): <pre><code># use -s option to save Inventory with new credentials for future references\n$ nornir_cli nornir-scrapli change_credentials -u user -p pass -h all show_inventory -i hosts\n{\n    \"hosts\": {\n        \"dev_1\": {\n            \"name\": \"dev_1\",\n            \"connection_options\": {},\n            \"groups\": [],\n            \"data\": {},\n            \"hostname\": \"10.3.2.1\",\n            \"port\": 22,\n            \"username\": \"user\",\n            \"password\": \"pass\",\n            \"platform\": null\n        }\n        ...\n        # other hosts\n        ...\n    }\n}\n</code></pre></p> <p><code>change_credentials</code> for <code>hosts</code> list and check <code>hosts</code> Inventory with new credentials (you can do the same for <code>groups</code> Inventory): <pre><code># use -s option to save Inventory with new credentials for future references\n$ nornir_cli nornir-scrapli change_credentials -u username -p password -h '[\"dev_1\"]' show_inventory -i hosts\n{\n    \"hosts\": {\n        \"dev_1\": {\n            \"name\": \"dev_1\",\n            \"connection_options\": {},\n            \"groups\": [],\n            \"data\": {},\n            \"hostname\": \"10.3.2.1\",\n            \"port\": 22,\n            \"username\": \"username\",\n            \"password\": \"password\",\n            \"platform\": null\n        }\n        ...\n        # other hosts with \"user\" username and \"password\" password\n        ...\n    }\n}\n</code></pre></p> <p>Also, you can use environment variables, <code>NORNIR_CLI_USERNAME</code> and <code>NORNIR_CLI_PASSWORD</code>: <pre><code>$ export NORNIR_CLI_USERNAME=user\n$ export NORNIR_CLI_PASSWORD=pass\n\n# use -s option to save Inventory with new credentials for future references\n$ nornir_cli nornir-scrapli change_credentials -h '[\"dev_1\"]' show_inventory -i hosts\n{\n    \"hosts\": {\n        \"dev_1\": {\n            \"name\": \"dev_1\",\n            \"connection_options\": {},\n            \"groups\": [],\n            \"data\": {},\n            \"hostname\": \"10.3.2.1\",\n            \"port\": 22,\n            \"username\": \"user\",\n            \"password\": \"pass\",\n            \"platform\": null\n        }\n        ...\n        # other hosts with \"user\" username and \"password\" password\n        ...\n    }\n}\n</code></pre></p>"},{"location":"workflow/#tasks-and-runbooks","title":"Tasks and runbooks","text":"<p>I must say that each argument or option parameter can be passed to the Task as a json string. It's important.</p>"},{"location":"workflow/#single-tasks","title":"Single tasks","text":"<p>Ok, now we have filtered inventory for <code>dev_1</code>:</p> config.yaml:init:simple filtering: <pre><code># we will use NetBox Inventory\ninventory:\nplugin: NetBoxInventory2\noptions:\n  nb_url: \"http://your_nebox_domain\"\n  nb_token: \"your_netbox_token\"\n  ssl_verify: False\n</code></pre> <pre><code># -u / --username and -p / --password  will assign a username and password in defaults\n# -co / --connection_options will assign options for Scrapli framework\n# huawei is here just as an example\n$ nornir_cli nornir-scrapli init -u username -p password -co '{\"scrapli\": {\"platform\": \"huawei_vrp\", \"extras\":{\"ssh_config_file\": true}}}'\n</code></pre> <pre><code># let's filter current inventory, get dev_1 inventory object and save it\n# --hosts shows filtered hosts list\n$ nornir_cli nornir-scrapli filter --hosts -s name=dev_1\n\n# or an alternative way(json string)\n# $ nornir_cli nornir-scrapli filter --hosts -s '{\"name\":\"dev_1\"}'\n[\n    \"dev_1\"\n]\n</code></pre> <p>And let's start some Task based on Nornir plugins:</p> <p>At first, let's check all available Tasks/commands for current list of Nornir plugins:</p> norir-netmiko:nornir-scrapli:nornir-napalm:nornir-jinja2:nornir-pyez:nornir-f5:nornir-paramiko:nornir-http:nornir-pyxl:nornir-netconf:nornir-routeros <pre><code>$ nornir_cli nornir-netmiko\nUsage: nornir_cli nornir-netmiko [OPTIONS] COMMAND1 [ARGS]... [COMMAND2\n                                 [ARGS]...]...\n\n  nornir_netmiko plugin\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  change_credentials     Change username and password\n  filter                 Do simple or advanced filtering\n  init                   Initialize a Nornir\n  netmiko_commit         Execute Netmiko commit method\n  netmiko_file_transfer  Execute Netmiko file_transfer method\n  netmiko_multiline      Execute Netmiko send_multiline method (or\n                         send_multiline_timing)\n  netmiko_save_config    Execute Netmiko save_config method\n  netmiko_send_command   Execute Netmiko send_command method (or\n                         send_command_timing)\n  netmiko_send_config    Execute Netmiko send_config_set method (or\n                         send_config_from_file)\n  print_result           print_result from nornir_utils\n  show_inventory         Show current inventory\n  write_file             Write_file, but not from nornir_utils\n  write_result           Write `Result` object to file\n  write_results          Write `Result` object to files\n</code></pre> <pre><code>$ nornir_cli nornir-scrapli\nUsage: nornir_cli nornir-scrapli [OPTIONS] COMMAND1 [ARGS]... [COMMAND2\n                             [ARGS]...]...\n\n  nornir_scrapli plugin\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  cfg_abort_config         Abort a device candidate config with scrapli-cfg\n  cfg_commit_config        Commit a device candidate config with scrapli-cfg\n  cfg_diff_config          Diff a device candidate config vs a source config\n                           with scrapli-cfg\n  cfg_get_config           Get device config with scrapli-cfg\n  cfg_get_version          Get device version with scrapli-cfg\n  cfg_load_config          Load device config with scrapli-cfg\n  change_credentials       Change username and password\n  filter                   Do simple or advanced filtering\n  get_prompt               Get current prompt from device using scrapli\n  init                     Initialize a Nornir\n  netconf_capabilities     Retrieve the device config with scrapli_netconf\n  netconf_commit           Commit the device config with scrapli_netconf\n  netconf_delete_config    Send a \"delete-config\" rcp to the device with\n                           scrapli_netconf\n  netconf_discard          Discard the device config with scrapli_netconf\n  netconf_edit_config      Edit config from the device with scrapli_netconf\n  netconf_get              Get from the device with scrapli_netconf\n  netconf_get_config       Get config from the device with scrapli_netconf\n  netconf_lock             Lock the device with scrapli_netconf\n  netconf_rpc              Send a \"bare\" rcp to the device with\n                           scrapli_netconf\n  netconf_unlock           Unlock the device with scrapli_netconf\n  netconf_validate         Send a \"validate\" rcp to the device with\n                           scrapli_netconf\n  print_result             print_result from nornir_utils\n  send_command             Send a single command to device using scrapli\n  send_commands            Send a list of commands to device using scrapli\n  send_commands_from_file  Send a list of commands from a file to device using\n                           scrapli\n  send_config              Send a config to device using scrapli\n  send_configs             Send configs to device using scrapli\n  send_configs_from_file   Send configs from a file to device using scrapli\n  send_interactive         Send inputs in an interactive fashion using\n                           scrapli; usually used to handle prompts\n  show_inventory           Show current inventory\n  write_file               Write_file, but not from nornir_utils\n  write_result             Write `Result` object to file\n  write_results            Write `Result` object to files\n</code></pre> <pre><code>$ nornir_cli nornir-napalm\nUsage: nornir_cli nornir-napalm [OPTIONS] COMMAND1 [ARGS]... [COMMAND2\n                            [ARGS]...]...\n\n  nornir_napalm plugin\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  change_credentials  Change username and password\n  filter              Do simple or advanced filtering\n  init                Initialize a Nornir\n  napalm_cli          Run commands on remote devices using napalm\n  napalm_configure    Loads configuration into a network devices using napalm\n  napalm_get          Gather information from network devices using napalm\n  napalm_ping         Executes ping on the device and returns a dictionary\n                      with the result\n  napalm_validate     Gather information with napalm and validate it\n  print_result        print_result from nornir_utils\n  show_inventory      Show current inventory\n  write_file          Write_file, but not from nornir_utils\n  write_result        Write `Result` object to file\n  write_results       Write `Result` object to files\n</code></pre> <pre><code>$ nornir_cli nornir-jinja2\nUsage: nornir_cli nornir-jinja2 [OPTIONS] COMMAND1 [ARGS]... [COMMAND2\n                            [ARGS]...]...\n\n  nornir_jinja2 plugin\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  change_credentials  Change username and password\n  filter              Do simple or advanced filtering\n  init                Initialize a Nornir\n  print_result        print_result from nornir_utils\n  show_inventory      Show current inventory\n  template_file       Renders contants of a file with jinja2. All the host\n                      data is available in the template\n  template_string     Renders a string with jinja2. All the host data is\n                      available in the template\n  write_file          Write_file, but not from nornir_utils\n  write_result        Write `Result` object to file\n  write_results       Write `Result` object to files\n</code></pre> <pre><code>$ nornir_cli nornir-pyez\nUsage: nornir_cli nornir-pyez [OPTIONS] COMMAND1 [ARGS]... [COMMAND2\n                              [ARGS]...]...\n\n  nornir_pyez plugin\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  change_credentials             Change username and password\n  filter                         Do simple or advanced filtering\n  init                           Initialize a Nornir\n  print_result                   print_result from nornir_utils\n  pyez_chassis_inventory\n  pyez_checksum\n  pyez_cmd\n  pyez_commit\n  pyez_config\n  pyez_diff\n  pyez_facts\n  pyez_get_arp\n  pyez_get_config\n  pyez_get_int_optics_diag_info\n  pyez_int_terse\n  pyez_rollback\n  pyez_route_info\n  pyez_rpc\n  pyez_scp\n  pyez_sec_ike\n  pyez_sec_ipsec\n  pyez_sec_nat_dest\n  pyez_sec_nat_src\n  pyez_sec_policy\n  pyez_sec_zones\n  show_inventory                 Show current inventory\n  write_file                     Write_file, but not from nornir_utils\n  write_result                   Write `Result` object to file\n  write_results                  Write `Result` object to files\n</code></pre> <pre><code>$ nornir_cli nornir-f5\nUsage: nornir_cli nornir-f5 [OPTIONS] COMMAND1 [ARGS]... [COMMAND2\n                            [ARGS]...]...\n\n  nornir_f5 plugin\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  atc                             Task to deploy declaratives on F5 devices\n  atc_info                        Task to verify if ATC service is available\n                                  and collect service info\n  bigip_cm_config_sync            Task to synchronize the configuration\n                                  between devices\n  bigip_cm_failover_status        Task to get the failover status of the\n                                  device\n  bigip_cm_sync_status            Task to get the synchronization status of\n                                  the device\n  bigip_shared_file_transfer_uploads\n                                  Upload a file to a BIG-IP system using the\n                                  iControl REST API\n  bigip_shared_iapp_lx_package    Task to manage Javascript LX packages on a\n                                  BIG-IP\n  bigip_sys_version               Gets the system version of the BIG-IP\n  bigip_util_unix_ls              Task to list information about the FILEs\n  bigip_util_unix_rm              Task to delete a file from a BIG-IP system\n  change_credentials              Change username and password\n  filter                          Do simple or advanced filtering\n  init                            Initialize a Nornir\n  print_result                    print_result from nornir_utils\n  show_inventory                  Show current inventory\n  write_file                      Write_file, but not from nornir_utils\n  write_result                    Write `Result` object to file\n  write_results                   Write `Result` object to files\n</code></pre> <pre><code>$ nornir_cli nornir-paramiko\nUsage: nornir_cli nornir-paramiko [OPTIONS] COMMAND1 [ARGS]... [COMMAND2\n                                  [ARGS]...]...\n\n  nornir_paramiko plugin\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  change_credentials  Change username and password\n  filter              Do simple or advanced filtering\n  init                Initialize a Nornir\n  paramiko_command    Executes a command remotely on the host\n  paramiko_sftp       Transfer files from/to the device using sftp protocol\n  print_result        print_result from nornir_utils\n  show_inventory      Show current inventory\n  write_file          Write_file, but not from nornir_utils\n  write_result        Write `Result` object to file\n  write_results       Write `Result` object to files\n</code></pre> <pre><code>$ nornir_cli nornir-http\nUsage: nornir_cli nornir-http [OPTIONS] COMMAND1 [ARGS]... [COMMAND2\n                              [ARGS]...]...\n\n  nornir_http plugin\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  change_credentials  Change username and password\n  filter              Do simple or advanced filtering\n  http_method         This is a helper task that uses `httpx\n                      &lt;https://www.python-httpx.org/api/&gt;`_ to interact with\n                      an HTTP server\n  init                Initialize a Nornir\n  print_result        print_result from nornir_utils\n  show_inventory      Show current inventory\n  write_file          Write_file, but not from nornir_utils\n  write_result        Write `Result` object to file\n  write_results       Write `Result` object to files\n</code></pre> <pre><code>$ nornir_cli nornir-pyxl\nUsage: nornir_cli nornir-pyxl [OPTIONS] COMMAND1 [ARGS]... [COMMAND2\n                              [ARGS]...]...\n\n  nornir_pyxl plugin\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  change_credentials  Change username and password\n  filter              Do simple or advanced filtering\n  init                Initialize a Nornir\n  print_result        print_result from nornir_utils\n  pyxl_ez_data        Loads a specific sheet from a workbook(xlsx file)\n  show_inventory      Show current inventory\n  write_file          Write_file, but not from nornir_utils\n  write_result        Write `Result` object to file\n  write_results       Write `Result` object to files\n</code></pre> <pre><code>$ nornir_cli nornir-netconf\nUsage: nornir_cli nornir-netconf [OPTIONS] COMMAND1 [ARGS]... [COMMAND2\n                                 [ARGS]...]...\n\n  nornir_netconf plugin\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  change_credentials    Change username and password\n  filter                Do simple or advanced filtering\n  init                  Initialize a Nornir\n  netconf_capabilities  Gather Netconf capabilities from device\n  netconf_commit        Commit operation\n  netconf_edit_config   Edit configuration of device using Netconf\n  netconf_get           Get information over Netconf from device\n  netconf_get_config    Get configuration over Netconf from device\n  netconf_get_schemas   Fetch provided schemas and write to a file\n  netconf_lock          NETCONF locking operations for a specified datastore\n  print_result          print_result from nornir_utils\n  show_inventory        Show current inventory\n  write_file            Write_file, but not from nornir_utils\n  write_result          Write `Result` object to file\n  write_results         Write `Result` object to files\n</code></pre> <pre><code>Usage: nornir_cli nornir-routeros [OPTIONS] COMMAND1 [ARGS]... [COMMAND2\n                                  [ARGS]...]...\n\n  nornir_routeros plugin\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  change_credentials    Change username and password\n  filter                Do simple or advanced filtering\n  init                  Initialize a Nornir\n  print_result          print_result from nornir_utils\n  routeros_command      Runs a RouterOS command such as ping or fetch\n  routeros_config_item  Configures an item\n  routeros_get          Returns a RouterOS resource\n  show_inventory        Show current inventory\n  write_file            Write_file, but not from nornir_utils\n  write_result          Write `Result` object to file\n  write_results         Write `Result` object to files\n</code></pre> <p>And start <code>netmiko_send_command</code>, for example:</p> <pre><code>$ nornir_cli nornir-netmiko netmiko_send_command --command_string \"display clock\"\n\n# or using json string as command argument\n# $ nornir_cli nornir-netmiko netmiko_send_command '{\"command_string\":\"display clock\"}'\nnetmiko_send_command************************************************************\n* dev_1 ** changed : False *****************************************************\nvvvv netmiko_send_command ** changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO\n2021-03-19 12:57:11+03:00\nFriday\nTime Zone(Moscow) : UTC+03:00\n^^^^ END netmiko_send_command ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ndev_1            : ok=1               changed=0               failed=0\n\nOK      : 1\nCHANGED : 0\nFAILED  : 0\n</code></pre> <p>Before, we added connection options for scrapli in <code>init</code> command. Let's check out some <code>nornir-scrapli</code> command:</p> <pre><code>$ nornir_cli nornir-scrapli send_command --command \"display clock\"\n\n# or using json string as command argument\n# $ nornir_cli nornir-scrapli send_command '{\"command\":\"display clock\"}'\nsend_command********************************************************************\n* dev_1 ** changed : False *****************************************************\nvvvv send_command ** changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO\n2021-03-19 13:18:53+03:00\nFriday\nTime Zone(Moscow) : UTC+03:00\n^^^^ END send_command ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ndev_1            : ok=1               changed=0               failed=0\n\nOK      : 1\nCHANGED : 0\nFAILED  : 0\n</code></pre> <p>As you may have noticed, there is a result and statistic in the output above. There are options <code>--print_result</code> and <code>--print_stat</code> for this. Options <code>--no_print_result</code> and <code>--no_print_stat</code> disable it.</p> <p><code>nornir-scrapli send_command</code> options, as instance: <pre><code>$ nornir_cli nornir-scrapli send_command --help\nUsage: nornir_cli nornir-scrapli send_command [OPTIONS] [ARGUMENTS]\n\n  Send a single command to device using scrapli\n\n      Args:\n\n          command: string to send to device in privilege exec mode\n\n          strip_prompt: True/False strip prompt from returned output\n\n          failed_when_contains: string or list of strings indicating failure\n          if found in response\n\n          timeout_ops: timeout ops value for this operation; only sets the\n          timeout_ops value for the duration of the operation, value is reset\n          to initial value after operation is completed\n\n      Returns: nornir Result attributes(optional), statistic, progress\n      bar(optional)\n\nOptions:\n  --pg_bar                        Progress bar flag\n  --print_result / --no_print_result\n                                  print_result from nornir_utils  [default:\n                                  print_result]\n  --print_stat / --no_print_stat  Print Result statistic for Nornir object\n                                  [default: print_stat]\n  --command TEXT                  [required]\n  --strip_prompt BOOLEAN          [default: True]\n  --failed_when_contains TEXT     [default: None]\n  --timeout_ops TEXT              [default: None]\n  --help                          Show this message and exit.\n</code></pre></p> <p>The examples above show 2 ways to pass parameters to the command: - using the command option: <pre><code>$ nornir_cli nornir-netmiko netmiko_send_command --command_string \"display clock\"\n</code></pre> - using a json string argument: <pre><code>$ nornir_cli nornir-netmiko netmiko_send_command '{\"command_string\":\"display clock\"}'\n# or\n$ nornir_cli nornir-netmiko netmiko_send_command 'command_string=display clock'\n# or\n$ nornir_cli nornir-netmiko netmiko_send_command '\"command_string\"=\"display clock\"'\n</code></pre></p> <p>When using options and arguments at the same time, the priority of options will be higher. For example, <code>nornir_cli nornir-netmiko netmiko_send_command --command_string \"disp ver\" '{\"command_string\":\"disp clock\"}'</code> will send <code>disp ver</code> command to device.</p>"},{"location":"workflow/#result-processing","title":"Result processing","text":"<p>print_result</p> <p>As you can see, you can disable default option <code>--print_result</code>, <code>--print_stat</code> and use <code>print_result</code> command instead of these. </p> <p><code>--print_result</code> option uses default arguments, but <code>print_result</code> command allows you to customize the output. You can output <code>class Result</code> attributes, limit results with <code>--count</code> option, print statistic with <code>--print_stat</code> option, etc. </p> <p>Let's see <code>print_result</code> options and run it:</p> print_result options:run print_result: <pre><code>$ nornir_cli nornir-scrapli print_result --help\nUsage: nornir_cli nornir-scrapli print_result [OPTIONS]\n\n  print_result from nornir_utils\n\nOptions:\n  -ph, --print_host BOOLEAN       Print hostnames  [default: True]\n  -attrs, --attributes TEXT       Result class attributes you want to print\n  -ps, --print_stat / -no_ps, --no_print_stat\n                                  Print Result statistic for Nornir object\n                                  [default: no_ps]\n  -cou, --count INTEGER           Results counter\n  -sl, --severity_level [CRITICAL|ERROR|WARNING|INFO|DEBUG|NOTSET]\n                                  Show only errors with this severity level or\n                                  higher  [default: INFO]\n  --failed BOOLEAN                If True assume the task failed  [default:\n                                  False]\n  --help                          Show this message and exit.\n</code></pre> <pre><code>$ nornir_cli nornir-scrapli send_command --command \"disp clock\" --no_print_result --no_print_stat print_result -attrs '[\"result\", \"diff\"]' -ps\n\n# or using json string as command argument\n# please note that the arguments must be specified after the options\n# $ nornir_cli nornir-scrapli send_command --no_print_result --no_print_stat '{\"command\":\"disp clock\"}' print_result -attrs '[\"result\", \"diff\"]' -ps\nsend_command********************************************************************\n* dev_1 ** changed : False *****************************************************\nvvvv send_command ** changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO\n2021-10-03 16:40:06+03:00\nSunday\nTime Zone(Moscow) : UTC+03:00\n^^^^ END send_command ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\ndev_1         : ok=1               changed=0               failed=0\n\nOK      : 1\nCHANGED : 0\nFAILED  : 0\n\n# send_command doesn't have \"diff\" attribute, so it's not displayed\n</code></pre> <p>write_result and write_results</p> <p>Result can be written to a file using <code>write_result</code> command for all hosts from current Inventory. </p> <p>By default, <code>write_result</code>  tries to create a file in the current directory or in the specified directory, if file doesn't exist.</p> <p><code>write_result</code> command has many options. For example, you can exclude errors from a file, write \"diff\" to another file or output it, use different write modes, limit entries number, etc.</p> <p>If you want to see which hosts have completed the task with an error, but do not add errors to the files, use <code>--no_errors</code> or <code>-ne</code> with <code>--print_stat</code> or <code>-ps</code> option.</p> write_result options:run write_result and print_stat:test.txt: <pre><code>$ nornir_cli nornir-scrapli write_result --help\nUsage: nornir_cli nornir-scrapli write_result [OPTIONS]\n\n  Write an object of type `nornir.core.task.Result` to file\n\nOptions:\n  -f, --filename TEXT             File you want to write into  [required]\n  -ne, --no_errors                Do not write errors to file  [default:\n                                  False]\n  -wh, --write_host BOOLEAN       Write hostnames  [default: True]\n  -dtf, --diff_to_file PATH       Write diff to file\n  -pd, --print_diff / -no_pd, --no_print_diff\n                                  Print diff  [default: no_pd]\n  -a, --append                    Whether you want to replace the contents or\n                                  append to it  [default: False]\n  -attrs, --attributes TEXT       Result attributes you want to write (str or\n                                  list(json string)). There can be any Result\n                                  attributes or text. By default, the result\n                                  attribute is used\n  -ps, --print_stat / -no_ps, --no_print_stat\n                                  Print Result statistic for Nornir object\n                                  [default: no_ps]\n  -cou, --count INTEGER           Results counter\n  -sl, --severity_level [CRITICAL|ERROR|WARNING|INFO|DEBUG|NOTSET]\n                                  Show only errors with this severity level or\n                                  higher  [default: INFO]\n  --failed BOOLEAN                If True assume the task failed  [default:\n                                  False]\n  --help                          Show this message and exit.\n</code></pre> <pre><code>$ nornir_cli nornir-scrapli send_command --command \"disp clock\" --no_print_result --no_print_stat write_result -f test.txt -ne -ps -attrs '[\"result\", \"diff\"]'\n\n# or using json string as command argument\n# please note that the arguments must be specified after the options\n# $ nornir_cli nornir-scrapli send_command --no_print_result --no_print_stat '{\"command\":\"disp clock\"}' write_result -f test.txt -ne -ps -attrs '[\"result\", \"diff\"]'\ndev_1         : ok=1               changed=0               failed=0              \n\nOK      : 1\nCHANGED : 0\nFAILED  : 0\n\n# send_command doesn't have \"diff\" attribute, so it's not displayed\n</code></pre> <pre><code>vvvv dev_1: ** send_command ** changed : False  INFO\n\n2021-10-03 17:03:41+03:00\nSunday\nTime Zone(Moscow) : UTC+03:00\n</code></pre> <p>Result can be written to a files with hostnames as filenames using <code>write_results</code> command for all hosts from current Inventory. For example, it is usefull for diagnostic commands, that run many <code>show something</code> or <code>display something</code> commands.</p> <p>By default, <code>write_results</code>  tries to create a specified directory, if it doesn't exist.</p> <p><code>write_results</code> command has the same options as <code>write_result</code>, but uses <code>-d</code> or <code>--dirname</code> instead of <code>-f</code> or <code>--filename</code>.</p> <p>If you want to see which hosts have completed the task with an error, but do not add errors to the files, use <code>--no_errors</code> or <code>-ne</code> with <code>--print_stat</code> or <code>-ps</code> option.</p> write_results options:run write_results and print_stat:test/dev_1: <pre><code>$ nornir_cli nornir-scrapli write_results --help\nUsage: nornir_cli nornir-scrapli write_results [OPTIONS]\n\n  Write an object of type `nornir.core.task.Result` to files with hostname\n  names\n\nOptions:\n  -d, --dirname TEXT              Direcotry you want to write into  [required]\n  -ne, --no_errors                Do not write errors to file  [default:\n                                  False]\n  -wh, --write_host BOOLEAN       Write hostnames  [default: True]\n  -dtf, --diff_to_file PATH       Write diff to file\n  -pd, --print_diff / -no_pd, --no_print_diff\n                                  Print diff  [default: no_pd]\n  -a, --append                    Whether you want to replace the contents or\n                                  append to it  [default: False]\n  -attrs, --attributes TEXT       Result attributes you want to write (str or\n                                  list(json string)). There can be any Result\n                                  attributes or text. By default, the result\n                                  attribute is used\n  -ps, --print_stat / -no_ps, --no_print_stat\n                                  Print Result statistic for Nornir object\n                                  [default: no_ps]\n  -cou, --count INTEGER           Results counter\n  -sl, --severity_level [CRITICAL|ERROR|WARNING|INFO|DEBUG|NOTSET]\n                                  Show only errors with this severity level or\n                                  higher  [default: INFO]\n  --failed BOOLEAN                If True assume the task failed  [default:\n                                  False]\n  --help                          Show this message and exit.\n</code></pre> <pre><code>$ nornir_cli nornir-scrapli send_command --command \"disp clock\" --no_print_result --no_print_stat write_results -d test -ne -ps -attrs '[\"result\", \"diff\"]'\n\n# or using json string as command argument\n# please note that the arguments must be specified after the options\n# $ nornir_cli nornir-scrapli send_command --no_print_result --no_print_stat '{\"command\":\"disp clock\"}' write_results -d test -ne -ps -attrs '[\"result\", \"diff\"]'\ndev_1         : ok=1               changed=0               failed=0\n\nOK      : 1\nCHANGED : 0\nFAILED  : 0\n\n# send_command doesn't have \"diff\" attribute, so it's not displayed\n</code></pre> <pre><code>vvvv dev_1 ** send_command ** changed : False  INFO\n\n2021-10-03 17:28:57+03:00\nSunday\nTime Zone(Moscow) : UTC+03:00\n</code></pre> <p>write_file</p> <p><code>write_file</code> command writes any text to a file with the required number of indents. So you can add some useful data to previously generated file <code>test.txt</code>:</p> write_file options:run write_file:test.txt: <pre><code>$ nornir_cli nornir-scrapli write_file --help\nUsage: nornir_cli nornir-scrapli write_file [OPTIONS]\n\n  Write_file, but not from nornir_utils\n\nOptions:\n  -l, --line_feed      number of \\n before text  [default: 0;x&gt;=0]\n  -a, --append         Whether you want to replace the contents or append to\n                       it  [default: False]\n  -c, --content TEXT   Content you want to write (string)  [required]\n  -f, --filename TEXT  File you want to write into  [required]\n  --help               Show this message and exit.\n</code></pre> <pre><code>$ nornir_cli nornir-scrapli write_file -lll -a -c \"some useful data\" -f test.txt\n</code></pre> <pre><code>vvvv dev_1 ** send_command ** changed : False  INFO\n\n2021-10-03 17:03:41+03:00\nSunday\nTime Zone(Moscow) : UTC+03:00\n\n\nsome useful data\n</code></pre>"},{"location":"workflow/#what-about-netconf","title":"What about netconf?","text":"<p>If some devices support netconf, you can use <code>nornir-scrapli</code>, <code>nornir-netconf</code> or <code>nornir-pyez</code> Nornir plugins from <code>nornir_cli</code>.</p> <p>Here is easy way to get xml tree from yang</p> <p>As instance,<code>dev_3</code> understands netconf XML. Let's get <code>nornir.core.Nornir</code> object for <code>dev_3</code> and run some netconf command with nornir-scrapli and nornir-netconf:</p> <p>nornir-scrapli:</p> get Nornir object for dev_3:nornir-scrapli: <pre><code>$ nornir_cli nornir-scrapli init -u username -p password -co '{\"scrapli\": {\"platform\": \"huawei_vrp\", \"extras\":{\"ssh_config_file\": true}}}' filter --hosts -s 'name=dev_3'\n[\n    \"dev_3\"\n]\n</code></pre> <pre><code>$ nornir_cli nornir-scrapli netconf_get --filter_='&lt;ifm xmlns=\"http://www.huawei.com/netconf/vrp/huawei-ifm\"&gt;&lt;interfaces&gt;&lt;interface&gt;&lt;ifName/&gt;&lt;/interface&gt;&lt;/interfaces&gt;&lt;/ifm&gt;' --filter_type subtree\n\n# or\n# $ nornir_cli nornir-scrapli netconf_get --filter_ '&lt;ifm xmlns=\"http://www.huawei.com/netconf/vrp/huawei-ifm\"&gt;&lt;interfaces&gt;&lt;interface&gt;&lt;ifName/&gt;&lt;/interface&gt;&lt;/interfaces&gt;&lt;/ifm&gt;' --filter_type subtree\n\n...\nnetconf_get*********************************************************************\n* dev_3 ** changed : False *****************************************************\nvvvv netconf_get ** changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO\n&lt;rpc-reply xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"101\"&gt;\n  &lt;data&gt;\n    &lt;ifm xmlns=\"http://www.huawei.com/netconf/vrp/huawei-ifm\"&gt;\n      &lt;interfaces&gt;\n        &lt;interface&gt;\n          &lt;ifIndex&gt;1&lt;/ifIndex&gt;\n          &lt;ifName&gt;Virtual-Template0&lt;/ifName&gt;\n        &lt;/interface&gt;\n\n        ...\n\n        &lt;interface&gt;\n          &lt;ifIndex&gt;717&lt;/ifIndex&gt;\n          &lt;ifName&gt;GigabitEthernet4/1/1.514&lt;/ifName&gt;\n        &lt;/interface&gt;\n      &lt;/interfaces&gt;\n    &lt;/ifm&gt;\n  &lt;/data&gt;\n&lt;/rpc-reply&gt;\n\n^^^^ END netconf_get ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ndev_3                                        : ok=1               changed=0               failed=0\n\nOK      : 1\nCHANGED : 0\nFAILED  : 0\n</code></pre> <p>nornir-netconf with write_result command:</p> get Nornir object for dev_3:nornir-netconf:netconf.txt: <pre><code>nornir_cli nornir-netconf init -u username -p password -c None -co '{\"netconf\": {\"extras\":{\"allow_agent\": false, \"look_for_keys\": false, \"hostkey_verify\": false}}}' -f 'inventory={\"plugin\":\"NetBoxInventory2\", \"options\": {\"nb_url\": \"http://your_netbox_domain\", \"nb_token\": \"your_netbox_token\", \"ssl_verify\": false}} runner={\"plugin\": \"threaded\", \"options\": {\"num_workers\": 50}}'\n\n$ nornir_cli nornir-netconf filter -s 'name=dev_3'\n[\n   \"dev_3\"\n]\n</code></pre> <pre><code>$ nornir_cli nornir-netconf netconf_get --path '&lt;ifm xmlns=\"http://www.huawei.com/netconf/vrp/huawei-ifm\" content-version=\"1.0\" format-version=\"1.0\"&gt;  &lt;interfaces&gt;    &lt;interface&gt;      &lt;ifName/&gt;    &lt;/interface&gt;  &lt;/interfaces&gt;&lt;/ifm&gt;' --filter_type subtree  --no_print_result --no_print_stat write_result -f netconf.txt\n</code></pre> <pre><code>vvvv dev_3: netconf_get ** changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO\n\n{'error': None, 'errors': [], 'ok': True, 'rpc': &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;rpc-reply message-id=\"urn:uuid:3\" xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"&gt;\n  &lt;data&gt;\n    &lt;ifm xmlns=\"http://www.huawei.com/netconf/vrp/huawei-ifm\"&gt;\n      &lt;interfaces&gt;\n        &lt;interface&gt;\n          &lt;ifName&gt;Virtual-Template0&lt;/ifName&gt;\n        &lt;/interface&gt;\n        &lt;interface&gt;\n          &lt;ifName&gt;NULL0&lt;/ifName&gt;\n        &lt;/interface&gt;\n        &lt;interface&gt;\n          &lt;ifName&gt;GigabitEthernet0/0/0&lt;/ifName&gt;\n        &lt;/interface&gt;\n        ...\n        &lt;/interfaces&gt;\n    &lt;/ifm&gt;\n  &lt;/data&gt;\n&lt;/rpc-reply&gt;}\n</code></pre>"},{"location":"workflow/#what-about-http-xlsx-jinja2","title":"What about http, xlsx, jinja2?","text":"<p><code>nornir_cli</code> includes <code>nornir-http</code>, <code>nornir-pyxl</code>, <code>nornir-jinja2</code> Nornir plugins. </p> <p>Remember that when using these plugins, each command is run for each host from the Inventory. Therefore, if you need to process <code>xlsx</code>, execute <code>http request</code> or get a single <code>jinja2</code> template without binding to devices, then run the command from the Nornir plugin for one device from the Inventory. </p> <p>See examples</p>"},{"location":"workflow/#command-chains","title":"Command chains","text":"<p>And, of course, you can run any command chains, even very scary ones. For <code>nornir_cli</code> version <code>&lt;= 1.2.0</code>, you can use the following syntax:</p> <pre><code>$ nornir_cli nornir-scrapli init -u username -p password \\\n-co '{\"scrapli\": {\"platform\": \"huawei_vrp\", \"extras\":{\"ssh_config_file\": true}}}' \\\nfilter --hosts -s 'name=dev_1' send_command --command \"display clock\" \\\nsend_interactive --interact_events '[[\"save\", \"Are you sure to continue?[Y/N]\", false], \\\n[\"Y\", \"Save the configuration successfully.\", true]]'\n</code></pre> <p>For <code>nornir_cli</code> version <code>&gt;= 1.3.0</code>, you can use only json strings as an argument:</p> <pre><code># $ nornir_cli nornir-scrapli init -u username -p password \\\n-co '{\"scrapli\": {\"platform\": \"huawei_vrp\", \"extras\":{\"ssh_config_file\": true}}}' \\\nfilter --hosts -s '{\"name\":\"dev_1\"}' send_command '{\"command\":\"display clock\"}' \\\nsend_interactive '{\"interact_events\":[[\"save\", \"Are you sure to continue?[Y/N]\", false], \\\n[\"Y\", \"Save the configuration successfully.\", true]]}'\n[\n    \"dev_1\"\n]\n\nsend_command********************************************************************\n* dev_1 ** changed : False *****************************************************\nvvvv send_command ** changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO\n2021-03-19 14:12:38+03:00\nFriday\nTime Zone(Moscow) : UTC+03:00\n^^^^ END send_command ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ndev_1            : ok=1               changed=0               failed=0\n\nOK      : 1\nCHANGED : 0\nFAILED  : 0\n\nsend_interactive****************************************************************\n* dev_1 ** changed : True ******************************************************\nvvvv send_interactive ** changed : True vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO\n^^^^ END send_interactive ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ndev_1            : ok=1               changed=1               failed=0\n\nOK      : 1\nCHANGED : 1\nFAILED  : 0\n</code></pre> <p>Again, i repeat that each argument can be passed to the Task as a json string.</p>"},{"location":"workflow/#runbook-collections","title":"Runbook collections","text":"<p>If you solve some automation tasks with the Nornir, then you, probably, have Nornir runbooks.You can use <code>nornir_cli</code> as interface for manage these Nornir runbooks.</p> <p>Create any directory trees in the <code>custom_commands</code> directory and put your Nornir runbooks there, following the simple rules. Then run them for any hosts from CLI, managing your inventory with <code>nornir_cli</code>. This is very similar to <code>Ansible Roles</code>.</p> <p>Let's create a collection of your Nornir runbooks using <code>nornir_cli</code>. </p> <p>For example, I have Nornir runbook called <code>\"cmd_dhcp_snooping.py\"</code>, and I want to add it to a <code>dhcp</code> group in <code>nornir_cli</code>.  Then, my directory tree:</p> <pre><code>$ tree ~/virtenvs/py3.8.4/lib/python3.8/site-packages/nornir_cli/custom_commands/\n/home/user/virtenvs/py3.8.4/lib/python3.8/site-packages/nornir_cli/custom_commands/\n\u251c\u2500\u2500 dhcp\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 cmd_dhcp_snooping.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 templates\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 dhcp_snooping.j2\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 disp_int.template\n\u2514\u2500\u2500 __init__.py\n\n2 directories, 4 files\n</code></pre> <p>And my <code>nornir_cli</code> structure:</p> nornir_cli:nornir_cli dhcp: <pre><code>$ nornir_cli\nUsage: nornir_cli [OPTIONS] COMMAND [ARGS]...\n\n  Nornir CLI\n\n  Orchestrate your Inventory and start Tasks and Runbooks\n\nOptions:\n  --version  Show the version and exit.\n  --help     Show this message and exit.\n\nCommands:\n  dhcp\n  nornir-f5        nornir_f5 plugin\n  nornir-http      nornir_http plugin\n  nornir-jinja2    nornir_jinja2 plugin\n  nornir-napalm    nornir_napalm plugin\n  nornir-netconf   nornir_netconf plugin\n  nornir-netmiko   nornir_netmiko plugin\n  nornir-paramiko  nornir_paramiko plugin\n  nornir-pyez      nornir_pyez plugin\n  nornir-pyxl      nornir_pyxl plugin\n  nornir-routeros  nornir_routeros plugin\n  nornir-scrapli   nornir_scrapli plugin\n</code></pre> <pre><code>$ nornir_cli dhcp\nUsage: nornir_cli dhcp [OPTIONS] COMMAND1 [ARGS]... [COMMAND2 [ARGS]...]...\n\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  change_credentials  Change username and password\n  dhcp_snooping       Configure dhcp snooping\n  filter              Do simple or advanced filtering\n  init                Initialize a Nornir\n  print_result        print_result from nornir_utils\n  show_inventory      Show current inventory\n  write_file          Write_file, but not from nornir_utils\n  write_result        Write `Result` object to file\n  write_results       Write `Result` object to files\n</code></pre> <p>Ok, let's run the <code>dhcp_snooping</code> command on all access switches from our NetBox Inventory:</p> get access switches:run dhcp_snooping: <pre><code>$ nornir_cli dhcp init filter --hosts -s -a 'data__device_type__model__contains=S2320-28TP-EI-DC &amp; name__contains=access'\n[\n    \"access_1\"\n]\n</code></pre> <pre><code>$ nornir_cli dhcp dhcp_snooping\naccess_1            : ok=1               changed=1               failed=0\n\nOK      : 1\nCHANGED : 1\nFAILED  : 0\n</code></pre> <p>More detailed - How to add your custom Nornir runbook in <code>nornir_cli</code></p>"}]}